name: CI/CD for EC-CUBE
on:
  push:
  pull_request:
  release:
    types: [ published ]
jobs:
  phpunit:
    name: PHPUnit
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-18.04 ]
        php: [ 7.1, 7.2, 7.3 ]
        db: [ mysql, pgsql, sqlite3 ]
        include:
          - db: mysql
            database_url: mysql://root:root@localhost:3306/eccube_db
            database_server_version: 5
          - db: pgsql
            database_url: postgres://postgres:password@localhost:5432/eccube_db
            database_server_version: 11
          - db: sqlite3
            database_url: sqlite:///var/eccube.db
            database_server_version: 3

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Setup PHP
      uses: nanasess/setup-php@master
      with:
        php-version: ${{ matrix.php }}

    - name: composer install
      run: composer install --dev --no-interaction -o --apcu-autoloader

    - name: Setup EC-CUBE
      env:
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
      run: |
        bin/console doctrine:database:create
        bin/console doctrine:schema:create
        bin/console eccube:fixtures:load

    - name: PHPUnit
      env:
        APP_ENV: 'test'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
      run: |
        bin/phpunit --exclude-group cache-clear,cache-clear-install,update-schema-doctrine
        bin/phpunit --group cache-clear
        bin/phpunit --group cache-clear-install
        bin/phpunit --group update-schema-doctrine --exclude-group update-schema-doctrine-install
        bin/phpunit --group update-schema-doctrine-install --filter=testInstallPluginWithNoProxy
        bin/phpunit --group update-schema-doctrine-install --filter=testInstallPluginWithProxy
        bin/phpunit --group update-schema-doctrine-install --filter=testEnablePluginWithNoProxy
        bin/phpunit --group update-schema-doctrine-install --filter=testEnablePluginWithProxy
        bin/phpunit --group update-schema-doctrine-install --filter=testDisablePluginWithNoProxy
        bin/phpunit --group update-schema-doctrine-install --filter=testDisablePluginWithProxy
        bin/phpunit --group update-schema-doctrine-install --filter=testCreateEntityAndTrait

  codeception:
    name: Codeception
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-18.04 ]
        php: [ 7.3 ]
        db: [ pgsql ]
        group: [ admin01, admin02, admin03, front, installer ]
        include:
          - db: pgsql
            database_url: postgres://postgres:password@localhost:5432/eccube_db
            database_server_version: 11
          - group: admin01
            app_env: 'codeception'
          - group: admin02
            app_env: 'codeception'
          - group: admin03
            app_env: 'codeception'
          - group: front
            app_env: 'codeception'
          - group: installer
            app_env: 'install'
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      mailcatcher:
        image: schickling/mailcatcher
        ports:
          - 1080:1080
          - 1025:1025

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Setup actions
      run: |
        cd .github/actions/setup-chromedriver
        npm install
        npm run build

    - name: Setup PHP
      uses: nanasess/setup-php@master
      with:
        php-version: ${{ matrix.php }}

    - name: composer install
      run: composer install --dev --no-interaction -o --apcu-autoloader
    - name: Setup to EC-CUBE
      env:
        APP_ENV: ${{ matrix.app_env }}
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
      run: |
        echo "APP_ENV=${APP_ENV}" > .env
        bin/console doctrine:database:create --env=dev
        bin/console doctrine:schema:create --env=dev
        bin/console eccube:fixtures:load --env=dev

    - name: setup-chromedriver
      uses: ./.github/actions/setup-chromedriver

    - name: Run chromedriver
      run: |
        export DISPLAY=:99
        chromedriver --url-base=/wd/hub &
        echo ">>> Started chrome-driver"
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
        echo ">>> Started xvfb"

    - name: Start PHP Development Server
      env:
        APP_ENV: 'codeception'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
      run: php -S localhost:8000 &

    - name: Codeception
      env:
        APP_ENV: ${{ matrix.app_env }}
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
        GROUP: ${{ matrix.group }}
      run: vendor/bin/codecept -vvv run acceptance --env chrome,github_action -g ${GROUP}

  plugin-install:
    name: Plugin install
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-18.04 ]
        php: [ 7.3 ]
        db: [ pgsql, mysql ]
        method:
          - test_install_enable_disable_remove_store
          - test_install_enable_disable_remove_local
          - test_install_enable_disable_enable_disable_remove_store
          - test_install_enable_disable_enable_disable_remove_local
          - test_install_remove_local
          - test_install_remove_store
        include:
          - db: pgsql
            database_url: postgres://postgres:password@localhost:5432/eccube_db
            database_server_version: 11
          - db: mysql
            database_url: mysql://root:root@localhost:3306/eccube_db
            database_server_version: 5

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mailcatcher:
        image: schickling/mailcatcher
        ports:
          - 1080:1080
          - 1025:1025

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Setup actions
      run: |
        cd .github/actions/setup-chromedriver
        npm install
        npm run build

    - name: Setup PHP
      uses: nanasess/setup-php@master
      with:
        php-version: ${{ matrix.php }}

    - name: composer install
      run: composer install --dev --no-interaction -o --apcu-autoloader

    - name: Setup to EC-CUBE
      env:
        APP_ENV: 'codeception'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
      run: |
        echo "APP_ENV=${APP_ENV}" > .env
        bin/console doctrine:database:create --env=dev
        bin/console doctrine:schema:create --env=dev
        bin/console eccube:fixtures:load --env=dev

    - name: Update baseinfo with pgsql
      if: matrix.db == 'pgsql'
      env:
        PGPASSWORD: 'password'
      run: |
        sudo apt-fast install -y postgresql-client
        psql eccube_db -h 127.0.0.1 -U postgres -c "update dtb_base_info set authentication_key='test';"

    - name: Update baseinfo with mysql
      if: matrix.db == 'mysql'
      run: mysql -h 127.0.0.1 -u root -proot eccube_db -e "update dtb_base_info set authentication_key='test';"

    - name: setup-chromedriver
      uses: ./.github/actions/setup-chromedriver

    - name: Run chromedriver
      run: |
        export DISPLAY=:99
        chromedriver --url-base=/wd/hub &
        echo ">>> Started chrome-driver"
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
        echo ">>> Started xvfb"

    - name: Start PHP Development Server
      env:
        APP_ENV: 'codeception'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
      run: php -S localhost:8000 &

    ## $ {PWD}/repos does not exist so service cannot be started
    - name: Run package-api
      run: docker run -d --rm -v ${PWD}/repos:/repos -e MOCK_REPO_DIR=/repos -p 8080:8080 eccube/mock-package-api

    - name: Codeception
      env:
        APP_ENV: ${{ matrix.app_env }}
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        METHOD: ${{ matrix.method }}
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
        NO_FIXTURES: 1
      run: vendor/bin/codecept -vvv run acceptance --env chrome,github_action EA10PluginCest:${METHOD}

  plugin-update:
    name: Plugin Update
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-18.04 ]
        php: [ 7.3 ]
        db: [ pgsql, mysql ]
        method:
          - test_install_update_remove_store
          - test_install_update_remove_local
          - test_install_enable_disable_update_enable_disable_remove_local
          - test_install_enable_disable_update_enable_disable_remove_store
          - test_install_enable_update_disable_remove_store
          - test_install_enable_update_disable_remove_local
        include:
          - db: pgsql
            database_url: postgres://postgres:password@localhost:5432/eccube_db
            database_server_version: 11
          - db: mysql
            database_url: mysql://root:root@localhost:3306/eccube_db
            database_server_version: 5

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mailcatcher:
        image: schickling/mailcatcher
        ports:
          - 1080:1080
          - 1025:1025

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Setup actions
      run: |
        cd .github/actions/setup-chromedriver
        npm install
        npm run build

    - name: Setup PHP
      uses: nanasess/setup-php@master
      with:
        php-version: ${{ matrix.php }}

    - name: Install to Composer
      run: composer install --dev --no-interaction -o --apcu-autoloader
    - name: Setup to EC-CUBE
      env:
        APP_ENV: 'codeception'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
      run: |
        echo "APP_ENV=${APP_ENV}" > .env
        bin/console doctrine:database:create --env=dev
        bin/console doctrine:schema:create --env=dev
        bin/console eccube:fixtures:load --env=dev

    - name: Update baseinfo with pgsql
      if: matrix.db == 'pgsql'
      env:
        PGPASSWORD: 'password'
      run: |
        sudo apt-fast install -y postgresql-client
        psql eccube_db -h 127.0.0.1 -U postgres -c "update dtb_base_info set authentication_key='test';"

    - name: Update baseinfo with mysql
      if: matrix.db == 'mysql'
      run: mysql -h 127.0.0.1 -u root -proot eccube_db -e "update dtb_base_info set authentication_key='test';"

    - name: setup-chromedriver
      uses: ./.github/actions/setup-chromedriver

    - name: Run chromedriver
      run: |
        export DISPLAY=:99
        chromedriver --url-base=/wd/hub &
        echo ">>> Started chrome-driver"
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
        echo ">>> Started xvfb"

    - name: Start PHP Development Server
      env:
        APP_ENV: 'codeception'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
      run: php -S localhost:8000 &

    ## $ {PWD}/repos does not exist so service cannot be started
    - name: Run package-api
      run: docker run -d --rm -v ${PWD}/repos:/repos -e MOCK_REPO_DIR=/repos -p 8080:8080 eccube/mock-package-api

    - name: Run to Codeception
      env:
        APP_ENV: ${{ matrix.app_env }}
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        METHOD: ${{ matrix.method }}
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
        NO_FIXTURES: 1
      run: vendor/bin/codecept -vvv run acceptance --env chrome,github_action EA10PluginCest:${METHOD}

  plugin-extend:
    name: Plugin extend
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-18.04 ]
        php: [ 7.3 ]
        db: [ pgsql, mysql ]
        method:
          - test_extend_same_table_store
          - test_extend_same_table_disabled_remove_store
          - test_extend_same_table_local
          - test_extend_same_table_disabled_remove_local
          - test_extend_same_table_crossed_store
          - test_extend_same_table_crossed_local
        include:
          - db: pgsql
            database_url: postgres://postgres:password@localhost:5432/eccube_db
            database_server_version: 11
          - db: mysql
            database_url: mysql://root:root@localhost:3306/eccube_db
            database_server_version: 5

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mailcatcher:
        image: schickling/mailcatcher
        ports:
          - 1080:1080
          - 1025:1025

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Setup actions
      run: |
        cd .github/actions/setup-chromedriver
        npm install
        npm run build

    - name: Setup PHP
      uses: nanasess/setup-php@master
      with:
        php-version: ${{ matrix.php }}

    - name: Install to Composer
      run: composer install --dev --no-interaction -o --apcu-autoloader
    - name: Setup to EC-CUBE
      env:
        APP_ENV: 'codeception'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
      run: |
        echo "APP_ENV=${APP_ENV}" > .env
        bin/console doctrine:database:create --env=dev
        bin/console doctrine:schema:create --env=dev
        bin/console eccube:fixtures:load --env=dev

    - name: Update baseinfo with pgsql
      if: matrix.db == 'pgsql'
      env:
        PGPASSWORD: 'password'
      run: |
        sudo apt-fast install -y postgresql-client
        psql eccube_db -h 127.0.0.1 -U postgres -c "update dtb_base_info set authentication_key='test';"

    - name: Update baseinfo with mysql
      if: matrix.db == 'mysql'
      run: mysql -h 127.0.0.1 -u root -proot eccube_db -e "update dtb_base_info set authentication_key='test';"

    - name: setup-chromedriver
      uses: ./.github/actions/setup-chromedriver

    - name: Run chromedriver
      run: |
        export DISPLAY=:99
        chromedriver --url-base=/wd/hub &
        echo ">>> Started chrome-driver"
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
        echo ">>> Started xvfb"

    - name: Start PHP Development Server
      env:
        APP_ENV: 'codeception'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
      run: php -S localhost:8000 &

    ## $ {PWD}/repos does not exist so service cannot be started
    - name: Run package-api
      run: docker run -d --rm -v ${PWD}/repos:/repos -e MOCK_REPO_DIR=/repos -p 8080:8080 eccube/mock-package-api

    - name: Run to Codeception
      env:
        APP_ENV: ${{ matrix.app_env }}
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        METHOD: ${{ matrix.method }}
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
        NO_FIXTURES: 1
      run: vendor/bin/codecept -vvv run acceptance --env chrome,github_action EA10PluginCest:${METHOD}

  plugin-depend:
    name: Plugin depend
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ ubuntu-18.04 ]
        php: [ 7.3 ]
        db: [ pgsql, mysql ]
        method:
          - test_dependency_each_install_plugin
          - test_dependency_plugin_install
          - test_dependency_plugin_update
          - test_install_error
          - install_enable_disable_enable_disable_remove_store
        include:
          - db: pgsql
            database_url: postgres://postgres:password@localhost:5432/eccube_db
            database_server_version: 11
          - db: mysql
            database_url: mysql://root:root@localhost:3306/eccube_db
            database_server_version: 5

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mailcatcher:
        image: schickling/mailcatcher
        ports:
          - 1080:1080
          - 1025:1025

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Setup actions
      run: |
        cd .github/actions/setup-chromedriver
        npm install
        npm run build

    - name: Setup PHP
      uses: nanasess/setup-php@master
      with:
        php-version: ${{ matrix.php }}

    - name: Install to Composer
      run: composer install --dev --no-interaction -o --apcu-autoloader
    - name: Setup to EC-CUBE
      env:
        APP_ENV: 'codeception'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
      run: |
        echo "APP_ENV=${APP_ENV}" > .env
        bin/console doctrine:database:create --env=dev
        bin/console doctrine:schema:create --env=dev
        bin/console eccube:fixtures:load --env=dev

    - name: Update baseinfo with pgsql
      if: matrix.db == 'pgsql'
      env:
        PGPASSWORD: 'password'
      run: |
        sudo apt-fast install -y postgresql-client
        psql eccube_db -h 127.0.0.1 -U postgres -c "update dtb_base_info set authentication_key='test';"

    - name: Update baseinfo with mysql
      if: matrix.db == 'mysql'
      run: mysql -h 127.0.0.1 -u root -proot eccube_db -e "update dtb_base_info set authentication_key='test';"

    - name: setup-chromedriver
      uses: ./.github/actions/setup-chromedriver

    - name: Run chromedriver
      run: |
        export DISPLAY=:99
        chromedriver --url-base=/wd/hub &
        echo ">>> Started chrome-driver"
        sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
        echo ">>> Started xvfb"

    - name: Start PHP Development Server
      env:
        APP_ENV: 'codeception'
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
      run: php -S localhost:8000 &

    ## $ {PWD}/repos does not exist so service cannot be started
    - name: Run package-api
      run: docker run -d --rm -v ${PWD}/repos:/repos -e MOCK_REPO_DIR=/repos -p 8080:8080 eccube/mock-package-api

    - name: Run to Codeception
      env:
        APP_ENV: ${{ matrix.app_env }}
        DATABASE_URL: ${{ matrix.database_url }}
        DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
        MAILER_URL: 'smtp://localhost:1025'
        METHOD: ${{ matrix.method }}
        ECCUBE_PACKAGE_API_URL: 'http://localhost:8080'
        NO_FIXTURES: 1
      run: vendor/bin/codecept -vvv run acceptance --env chrome,github_action EA10PluginCest:${METHOD}
