name: test-integration
on:
    pull_request:
    # run at 6 hour UTC
    schedule:
      - cron: "0 6 * * *"
jobs:
    build:
        runs-on: ubuntu-latest
        timeout-minutes: 30
        strategy:
          matrix:
            php: [php72, php74]
        env:
          PROD_PHP: php72
          DOCKER_COMPOSE:  docker-compose -f docker-compose.yml -f docker-compose-${{matrix.php}}.yml
        steps:
            - name: Checkout
              uses: actions/checkout@master
            - name: Get Composer cache directory
              id: composer-cache
              run: |
                echo "::set-output name=dir::$(composer config cache-files-dir)"
            - name: Restore Composer cache
              uses: actions/cache@v1
              with:
                path: ${{ steps.composer-cache.outputs.dir }}
                key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                restore-keys: |
                  ${{ runner.os }}-composer-
            - name: Init environment
              run: cd docker && ./init.sh && cat .env
            - name: Build Docker environmnent
              if: always()
              run: |
                cd docker &&
                ${DOCKER_COMPOSE} up -d --build &&
                docker-compose exec -T php-fpm.vm.openconext.org bash -c '
                    SYMFONY_ENV=ci composer install --prefer-dist -n -o && \
                    ./app/console cache:clear --env=ci && \
                    cd theme && npm ci && npm run build
                '
            - name: Run unit tests
              if: always()
              run: |
                  cd docker && docker-compose exec -T php-fpm.vm.openconext.org bash -c '
                      echo -e "\nInstalling database fixtures...\n" && \
                      ./app/console doctrine:schema:drop --force --env=ci && \
                      ./app/console doctrine:schema:create --env=ci && \
                      echo -e "\nPHPUnit legacy tests\n" && \
                      ./vendor/bin/phpunit --configuration=./tests/phpunit.xml --testsuite=eb4 --coverage-text && \
                      echo -e "\nPHPUnit unit tests\n" && \
                      ./vendor/bin/phpunit --configuration=./tests/phpunit.xml --testsuite=unit --coverage-text && \
                      echo -e "\nPHPUnit integration tests\n" && \
                      ./vendor/bin/phpunit --configuration=./tests/phpunit.xml --testsuite=integration --coverage-text && \
                      echo -e "\nPHPUnit API accpetance tests\n" && \
                      ./vendor/bin/phpunit --configuration=./tests/phpunit.xml --testsuite=functional --coverage-text
                  '
              env:
                  SYMFONY_ENV: ci
            - name: Run acceptance tests
              if: always()
              run: |
                  cd docker && docker-compose exec -T php-fpm.vm.openconext.org bash -c '
                      echo -e "\nInstalling database fixtures...\n" && \
                      ./app/console doctrine:schema:drop --force --env=ci && \
                      ./app/console doctrine:schema:create --env=ci && \
                      echo -e "\nBehat tests\n" && \
                      ./vendor/bin/behat -c ./tests/behat-ci.yml --suite default -vv --format progress --strict && \
                      echo -e "\nBehat tests (with selenium and headless Chrome)\n" && \
                      ./vendor/bin/behat -c ./tests/behat-ci.yml --suite selenium -vv --format progress --strict
                  '
              env:
                  SYMFONY_ENV: ci
            - name: Run frontend tests
              if: always()
              run: |
                  cd docker && docker-compose exec -e CHROME_BIN="/usr/bin/chromium" -T php-fpm.vm.openconext.org bash -c '
                      cd theme && \
                      echo -e "\nNPM lint\n" && \
                      npm run lint && \
                      echo -e "\nJest unit tests\n" && \
                      ./node_modules/.bin/jest material/javascripts/tests/unit && \
                      echo -e "\nJest smoke tests\n" && \
                      ./node_modules/.bin/jest --runInBand material/javascripts/tests/smoke
                  '
              env:
                  SYMFONY_ENV: ci
            - name: Run code quality tests
              if: always()
              run: |
                  cd docker && docker-compose exec -T php-fpm.vm.openconext.org bash -c '
                      echo -e "\nPHP Mess Detector\n" && \
                      ./vendor/bin/phpmd src text ci/travis/phpmd.xml --exclude */Tests/* && \
                      echo -e "\nPHP CodeSniffer\n" && \
                      ./vendor/bin/phpcs --report=full --standard=ci/travis/phpcs.xml --warning-severity=0 --extensions=php src  && \
                      echo -e "\nPHP CodeSniffer (legacy code)\n" && \
                      ./vendor/bin/phpcs --standard=ci/travis/phpcs-legacy.xml --warning-severity=0 --extensions=php -s library  && \
                      echo -e "\nDoc header check\n" && \
                      ./vendor/bin/docheader check src/ tests/ library/ --exclude-dir resources
                  '
              env:
                  SYMFONY_ENV: ci
            - name: Run security audit
              if: always()
              run: |
                  cd docker && docker-compose exec -T php-fpm.vm.openconext.org bash -c '
                      echo -e "\nSensioLabs Security Check\n" && \
                      ./vendor/bin/security-checker security:check && \
                      cd theme && \
                      echo -e "\nNPM Audit\n" && \
                      npm run audit
                  '
              env:
                  SYMFONY_ENV: ci
            - name: Run visual regression tests
              if: always()
              run: |
                  cd docker && docker-compose exec -e CHROME_BIN="/usr/bin/chromium" -T php-fpm.vm.openconext.org bash -c '
                      cd theme && \
                      echo -e "\nJest visual regression tests\n" && \
                      ./node_modules/.bin/jest material/javascripts/tests/visual-regression
                  '
              env:
                  SYMFONY_ENV: ci
            - name: Show log on failure
              if: failure()
              run:  |
                  cd docker && docker-compose exec -T php-fpm.vm.openconext.org cat app/logs/ci/ci.log
            - name: Send notification on production build nightly build failure
              uses: sonots/slack-notice-action@v3
              with:
                  status: ${{ job.status }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
              if: ${{ failure() && github.event_name == 'schedule' && matrix.php == env.PROD_PHP }}
