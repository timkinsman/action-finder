name: Build
on:
  push:
    branches:
    - master
    tags:
    - v2.*
  pull_request:

jobs:
  skip-build:
    runs-on: ubuntu-18.04
    if: "!startsWith(github.ref, 'refs/tags/v2.') && contains(github.event.head_commit.message, '[skip]')"
    name: "Build skipped"

    steps:
      - name: Skipping
        run: echo "Skipping build"

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-18.04
    if: "startsWith(github.ref, 'refs/tags/v2.') || !contains(github.event.head_commit.message, '[skip]')"

    strategy:
      matrix:
        go: [ '1.14' ]
        node-version: [ '14.x' ]

    steps:
    - name: Get the version
      run: echo "::set-env name=VERSION::${GITHUB_REF/refs\/tags\/v/}"

    - name: Get the version
      if: startsWith(env.VERSION, 'refs/')
      run: echo "::set-env name=VERSION::2.0.${GITHUB_RUN_NUMBER}"

    - name: Set up Go ${{ matrix.go }}
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - uses: actions/setup-ruby@v1

    - name: Install gems
      run:
        gem install --no-doc fpm

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
      with:
        path: pufferpanel

    - name: Prepare
      run: |
        mkdir -p artifacts/amd64
        mkdir artifacts/arm
        mkdir artifacts/www
        cp -r assets/email artifacts/        
        sudo apt-get update
        sudo apt-get -y install gcc-7-arm-linux-gnueabi gcc-mingw-w64

    - name: Restore Go cache
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Restore NPM cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('client/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Generate Swagger Docs
      run: |
        go get -u github.com/swaggo/swag/cmd/swag
        swag init -o web/swagger -g web/loader.go
        
    - name: Build Linux
      run: |
        go build -o artifacts/amd64/pufferpanel -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=${{ github.sha }} -X github.com/pufferpanel/pufferpanel/version.Version=${{ env.VERSION }}" -v github.com/pufferpanel/pufferpanel/v2/cmd
        go test ./...
      env:
        GOOS: linux
        GOARCH: amd64

    - name: Build Windows
      run: |
        go build -o artifacts/amd64/pufferpanel.exe -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=${{ github.sha }} -X github.com/pufferpanel/pufferpanel/version.Version=${{ env.VERSION }}" -v github.com/pufferpanel/pufferpanel/v2/cmd
      env:
        GOOS: windows
        GOARCH: amd64
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        CGO_ENABLED: 1

    - name: Build ARM
      run: |
        go build -o artifacts/arm/pufferpanel -ldflags "-X github.com/pufferpanel/pufferpanel/version.Hash=${{ github.sha }} -X github.com/pufferpanel/pufferpanel/version.Version=${{ env.VERSION }}" -v github.com/pufferpanel/pufferpanel/v2/cmd
      env:
        GOOS: linux
        GOARCH: arm
        GOARM: 7
        CC: arm-linux-gnueabi-gcc-7
        CGO_ENABLED: 1

    - name: npm install, build
      run: |
        npm install
        npm run build
        rm -rf dist/*.map
        mv dist ../artifacts/www/pufferpanel
      env:
        CI: true
      working-directory: client

    - name: Snapshot folders
      run: |
        mkdir -p var/log/pufferpanel var/lib/pufferpanel

    - name: Build Package
      run: |
        fpm -s dir -t deb \
          --name pufferpanel \
          --version "${{ env.VERSION }}" \
          --url "https://pufferpanel.com" \
          --description "Game Management Panel" \
          --license "Apache 2.0" \
          --maintainer "dev@pufferpanel.com" \
          --before-install systemd/scripts/preinstall.sh \
          --after-install systemd/scripts/postinstall.sh \
          --before-upgrade systemd/scripts/preupgrade.sh \
          --after-upgrade systemd/scripts/postupgrade.sh \
          --before-remove systemd/scripts/preremove.sh \
          --after-remove systemd/scripts/postremove.sh \
          --deb-user pufferpanel --deb-group pufferpanel \
          --deb-systemd systemd/servicefiles/pufferpanel.service \
          --deb-after-purge systemd/scripts/purge.sh \
          artifacts/amd64/pufferpanel=/usr/sbin/pufferpanel \
          artifacts/www/pufferpanel=/var/www \
          var/log/pufferpanel=/var/log \
          var/lib/pufferpanel=/var/lib \
          artifacts/email=/etc/pufferpanel \
          config.linux.json=/etc/pufferpanel/config.json

        fpm -s deb -t rpm \
          --name pufferpanel \
          --version "${{ env.VERSION }}" \
          --url "https://pufferpanel.com" \
          --description "Game Management Panel" \
          --license "Apache 2.0" \
          --maintainer "dev@pufferpanel.com" \
          --before-install systemd/scripts/preinstall.sh \
          --after-install systemd/scripts/postinstall.sh \
          --before-upgrade systemd/scripts/preupgrade.sh \
          --after-upgrade systemd/scripts/postupgrade.sh \
          --before-remove systemd/scripts/preremove.sh \
          --after-remove systemd/scripts/postremove.sh \
          --rpm-user pufferpanel --rpm-group pufferpanel \
          pufferpanel_${{ env.VERSION }}_amd64.deb

        fpm -s dir -t deb \
          --name pufferpanel \
          --version "${{ env.VERSION }}" \
          --url "https://pufferpanel.com" \
          --description "Game Management Panel" \
          --license "Apache 2.0" \
          --maintainer "dev@pufferpanel.com" \
          --before-install systemd/scripts/preinstall.sh \
          --after-install systemd/scripts/postinstall.sh \
          --before-upgrade systemd/scripts/preupgrade.sh \
          --after-upgrade systemd/scripts/postupgrade.sh \
          --before-remove systemd/scripts/preremove.sh \
          --after-remove systemd/scripts/postremove.sh \
          --deb-user pufferpanel --deb-group pufferpanel \
          --deb-systemd systemd/servicefiles/pufferpanel.service \
          --deb-after-purge systemd/scripts/purge.sh \
          -a armhf \
          artifacts/arm/pufferpanel=/usr/sbin/pufferpanel \
          artifacts/www/pufferpanel=/var/www \
          var/log/pufferpanel=/var/log \
          var/lib/pufferpanel=/var/lib \
          artifacts/email=/etc/pufferpanel \
          config.linux.json=/etc/pufferpanel/config.json

    - name: Create archives
      working-directory: artifacts
      run: |
        cp -r email amd64/
        cp -r www amd64/
        cp -r email arm/
        cp -r www arm/
        cd amd64
        zip -r ../pufferpanel_${{ env.VERSION }}_amd64.zip pufferpanel pufferpanel.exe www email
        cd ../arm
        zip -r ../pufferpanel_${{ env.VERSION }}_armhf.zip pufferpanel www email

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_armhf.zip
        path: artifacts/pufferpanel_${{ env.VERSION }}_armhf.zip

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_amd64.zip
        path: artifacts/pufferpanel_${{ env.VERSION }}_amd64.zip

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel-${{ env.VERSION }}-1.x86_64.rpm
        path: pufferpanel-${{ env.VERSION }}-1.x86_64.rpm

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_amd64.deb
        path: pufferpanel_${{ env.VERSION }}_amd64.deb

    - name: Publish Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: pufferpanel_${{ env.VERSION }}_armhf.deb
        path: pufferpanel_${{ env.VERSION }}_armhf.deb

    - name: Install gems
      if: startsWith(github.ref, 'refs/tags/v2.')
      run: |
        gem install --no-doc package_cloud

    - name: Create Release	
      id: create_release	
      if: startsWith(github.ref, 'refs/tags/v2.')	
      uses: actions/create-release@v1.0.0	
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}	
      with:
        tag_name: ${{ github.ref }}	
        release_name: ${{ github.ref }}	
        draft: true	
        prerelease: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: startsWith(github.ref, 'refs/tags/v2.')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/amd64/pufferpanel_${{ env.VERSION }}_amd64.zip
        asset_name: pufferpanel_${{ env.VERSION }}_amd64.zip
        asset_content_type: application/zip

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: startsWith(github.ref, 'refs/tags/v2.')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/arm/pufferpanel_${{ env.VERSION }}_armhf.zip
        asset_name: pufferpanel_${{ env.VERSION }}_armhf.zip
        asset_content_type: application/zip

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      if: startsWith(github.ref, 'refs/tags/v2.')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/pufferpanel_${{ env.VERSION }}_amd64.deb
        asset_name: pufferpanel_${{ env.VERSION }}_amd64.deb
        asset_content_type: application/vnd.debian.binary-package

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/v2.')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/pufferpanel-${{ env.VERSION }}-1.x86_64.rpm
        asset_name: pufferpanel-${{ env.VERSION }}-1.x86_64.rpm
        asset_content_type: application/zip

    - name: Push to repo
      if: startsWith(github.ref, 'refs/tags/v2.')
      env:
        PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      working-directory: artifacts
      run: |
        #centos
        package_cloud push pufferpanel/pufferpanel/el/7 pufferpanel-${{ env.VERSION }}-1.x86_64.rpm
        package_cloud push pufferpanel/pufferpanel/el/8 pufferpanel-${{ env.VERSION }}-1.x86_64.rpm
        #ubuntu
        package_cloud push pufferpanel/pufferpanel/ubuntu/xenial pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/ubuntu/yakkety pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/ubuntu/aardvark pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/ubuntu/bionic pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/ubuntu/cosmic pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/ubuntu/disco pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/ubuntu/eoam pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/ubuntu/focal pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/ubuntu/groovy pufferpanel_${{ env.VERSION }}_amd64.deb
        #debian
        package_cloud push pufferpanel/pufferpanel/debian/jessie pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/debian/stretch pufferpanel_${{ env.VERSION }}_amd64.deb
        package_cloud push pufferpanel/pufferpanel/debian/buster pufferpanel_${{ env.VERSION }}_amd64.deb
        #raspbian
        package_cloud push pufferpanel/pufferpanel/raspbian/buster pufferpanel_${{ env.VERSION }}_armhf.deb
