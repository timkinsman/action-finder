name: Continuous Integration

on: [push, pull_request]

jobs:
  unix-build:
    name: Unix Build
    strategy:
      matrix:
        os: [ubuntu-18.04, macOS-latest]
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1
    - name: Environment Variables
      run: |
        CI_PYTHON_VERSION=${{ matrix.python-version }}
        CI_PACKAGE=colour
        CI_SHA=${{ github.sha }}
        CI_OPENIMAGEIO_VERSION=2.1.10.1
        CI_OPENIMAGEIO_ARTIFACT=https://github.com/colour-science/artifacts/releases/download/OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION.zip
        COVERALLS_REPO_TOKEN=${{ secrets.COVERALLS_REPO_TOKEN }}
        MPLBACKEND=AGG
        echo ::set-env name=CI_PYTHON_VERSION::$CI_PYTHON_VERSION
        echo ::set-env name=CI_PACKAGE::$CI_PACKAGE
        echo ::set-env name=CI_SHA::$CI_SHA
        echo ::set-env name=COVERALLS_REPO_TOKEN::$COVERALLS_REPO_TOKEN
        echo ::set-env name=CI_OPENIMAGEIO_ARTIFACT::$CI_OPENIMAGEIO_ARTIFACT
        echo ::set-env name=CI_OPENIMAGEIO_VERSION::$CI_OPENIMAGEIO_VERSION
        echo ::set-env name=MPLBACKEND::$MPLBACKEND
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Ubuntu - Update OS & Install APT Dependencies
      if: matrix.os == 'ubuntu-18.04'
      run: |
        sudo apt-get --yes install libboost-all-dev libilmbase-dev libopenexr-dev libpng-dev libtiff5-dev
    - name: Install Poetry
      run: |
        curl -L https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py -o get-poetry.py
        python get-poetry.py --preview --version 1.0.0b3
        PATH=$HOME/.poetry/bin:$PATH
        echo ::set-env name=PATH::$PATH
    - name: Python 3.8 - Matplotlib
      if: matrix.python-version == '3.8'
      run: |
        sed -i.bak 's/python = "~2.7 || ^3.5"/python = "^3.6"/g' pyproject.toml
        sed -i.bak 's/matplotlib = { version = "\*"/matplotlib = { version = "^3.1"/g' pyproject.toml
    - name: Install Package Dependencies
      run: |
        poetry install --extras "optional plotting"
        source $(poetry env info -p)/bin/activate
        python -c "import imageio;imageio.plugins.freeimage.download()"
    - name: Ubuntu - Install OpenImageIO
      if: matrix.os == 'ubuntu-18.04' && matrix.python-version == '3.6'
      run: |
        curl -L $CI_OPENIMAGEIO_ARTIFACT -o OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION.zip
        unzip OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION.zip -d OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION
        sudo cp OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/linux64/bin/* /usr/bin/
        sudo cp -r OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/linux64/lib/* /usr/lib/
        sudo rm -rf /usr/lib/python$CI_PYTHON_VERSION
        cp OpenImageIO-Release-$CI_OPENIMAGEIO_VERSION/linux64/lib/python$CI_PYTHON_VERSION/site-packages/OpenImageIO.so $(poetry env info -p)/lib/python$CI_PYTHON_VERSION/site-packages/
    - name: Lint with flake8
      run: |
        source $(poetry env info -p)/bin/activate
        flake8 $CI_PACKAGE --count --show-source --statistics
    - name: Test with nosetests
      run: |
        source $(poetry env info -p)/bin/activate
        python -W ignore -m nose -q -v --with-doctest --doctest-options=+ELLIPSIS --with-coverage --cover-package=$CI_PACKAGE $CI_PACKAGE
    - name: Upload Coverage to coveralls.io
      if: matrix.python-version == '3.6' || matrix.python-version == '3.7' || matrix.python-version == '3.8'
      run: |
        source $(poetry env info -p)/bin/activate
        if [ -z "$COVERALLS_REPO_TOKEN" ]; then echo \"COVERALLS_REPO_TOKEN\" secret is undefined!; else coveralls; fi
  windows-build:
    name: Windows Build
    strategy:
      matrix:
        os: [windows-2019]
        python-version: [2.7, 3.5, 3.6, 3.7]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1
    - name: Environment Variables
      run: |
        set CI_PYTHON_VERSION=${{ matrix.python-version }}
        set CI_PACKAGE=colour
        set CI_SHA=${{ github.sha }}
        set COVERALLS_REPO_TOKEN=${{ secrets.COVERALLS_REPO_TOKEN }}
        set MPLBACKEND=AGG
        echo ::set-env name=CI_PYTHON_VERSION::%CI_PYTHON_VERSION%
        echo ::set-env name=CI_PACKAGE::%CI_PACKAGE%
        echo ::set-env name=CI_SHA::%CI_SHA%
        echo ::set-env name=COVERALLS_REPO_TOKEN::%COVERALLS_REPO_TOKEN%
        echo ::set-env name=MPLBACKEND::%MPLBACKEND%
      shell: cmd
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: |
        curl -L https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py -o get-poetry.py
        python get-poetry.py --preview --version 1.0.0b3
        set PATH=%USERPROFILE%\.poetry\bin;%PATH%
        echo ::set-env name=PATH::%PATH%
      shell: cmd
    - name: Install Package Dependencies
      run: |
        call poetry install --extras "optional plotting"
        FOR /F %%a IN ('poetry env info -p') DO SET CI_VIRTUAL_ENVIRONMENT=%%a
        echo ::set-env name=CI_VIRTUAL_ENVIRONMENT::%CI_VIRTUAL_ENVIRONMENT%
        call %CI_VIRTUAL_ENVIRONMENT%\scripts\activate
        python -c "import imageio;imageio.plugins.freeimage.download()"
      shell: cmd
    - name: Lint with flake8
      run: |
        call %CI_VIRTUAL_ENVIRONMENT%\scripts\activate
        flake8 %CI_PACKAGE% --count --show-source --statistics
      shell: cmd
    - name: Test with nosetests
      run: |
        call %CI_VIRTUAL_ENVIRONMENT%\scripts\activate
        python -W ignore -m nose -q -v --with-doctest --doctest-options=+ELLIPSIS --with-coverage --cover-package=%CI_PACKAGE% %CI_PACKAGE%
      shell: cmd
    - name: Upload Coverage to coveralls.io
      if: matrix.python-version == '3.6' || matrix.python-version == '3.7'
      run: |
        call %CI_VIRTUAL_ENVIRONMENT%\scripts\activate
        IF "%COVERALLS_REPO_TOKEN%"=="" (echo "COVERALLS_REPO_TOKEN" secret is undefined!) ELSE (coveralls)
      shell: cmd
