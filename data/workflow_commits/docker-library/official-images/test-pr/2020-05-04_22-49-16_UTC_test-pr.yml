name: Test PR

on:
  pull_request:

defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:

  naughty:
    name: Naughty
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check for Common Issues
        run: |
          git clone --depth 1 https://github.com/docker-library/bashbrew.git -b master ~/bashbrew
          ~/bashbrew/bashbrew.sh --version > /dev/null
          export PATH="$HOME/bashbrew/bin:$PATH"
          bashbrew --version
          .github/workflows/naughty.sh

  label:
    name: Label
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: labels
        name: Generate List
        run: |
          labels="$(.github/workflows/pr-labels.sh)"
          labels="$(jq -Rsc 'rtrimstr("\n") | split("\n") | { labels: ., count: length }' <<<"$labels")"
          jq . <<<"$labels"
          echo "::set-output name=labels::$labels"
      - name: Apply Labels
        uses: actions/github-script@0.9.0
        with:
          script: |
            const data = ${{ steps.labels.outputs.labels }}
            github.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: data.labels,
            })
        if: fromJSON(steps.labels.outputs.labels).count > 0

  diff:
    name: Diff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: diff
        name: Run ./diff-pr.sh
        run: |
          git clone --depth 1 https://github.com/docker-library/bashbrew.git -b master ~/bashbrew
          ~/bashbrew/bashbrew.sh --version > /dev/null
          export PATH="$HOME/bashbrew/bin:$PATH"
          bashbrew --version
          diff="$(./diff-pr.sh 0)"
          # "Body is too long (maximum is 65536 characters)" (so we'll check for some fudge room and pre-filter the diff)
          # TODO consider instead creating a Gist (although that requires a separate type of token, so much less interesting)
          diff="$(jq -Rcs 'rtrimstr("\n") | { diff: (if length < 65000 then . else "TODO diff too large for GitHub comment!\nSee: http://github.com/" + env.GITHUB_REPOSITORY + "/actions/runs/" + env.GITHUB_RUN_ID end), length: length }' <<<"$diff")"
          echo "::set-output name=diff::$diff"
      - name: Delete Old Comments
        uses: actions/github-script@0.9.0
        with:
          script: |
            const { data: comments } = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            })
            comments.forEach((comment) => {
              if (comment.user.login === 'github-actions[bot]') {
                github.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                })
              }
            })
      - name: Create Diff Comment
        uses: actions/github-script@0.9.0
        with:
          script: |
            const data = ${{ steps.diff.outputs.diff }}
            const body = "<details>\n<summary>Diff for " + context.payload.pull_request.head.sha + ":</summary>\n\n```diff\n" + data.diff + "\n```\n\n</details>"
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body,
            })
        if: fromJSON(steps.diff.outputs.diff).length > 0

  generate-jobs:
    name: Generate Jobs
    runs-on: ubuntu-latest
    outputs:
      strategy: ${{ steps.generate-jobs.outputs.strategy }}
    steps:
      - uses: actions/checkout@v2
      - id: generate-jobs
        name: Generate Jobs
        run: |
          git clone --depth 1 https://github.com/docker-library/bashbrew.git -b master ~/bashbrew
          strategy="$(.github/workflows/generate.sh ~/bashbrew)"
          jq . <<<"$strategy" # sanity check / debugging aid
          echo "::set-output name=strategy::$strategy"

  test:
    needs: generate-jobs
    strategy: ${{ fromJson(needs.generate-jobs.outputs.strategy) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Prepare Environment
        run: ${{ matrix.runs.prepare }}
      - name: Pull Dependencies
        run: ${{ matrix.runs.pull }}
      - name: Build ${{ matrix.name }}
        run: ${{ matrix.runs.build }}
      - name: History ${{ matrix.name }}
        run: ${{ matrix.runs.history }}
      - name: Test ${{ matrix.name }}
        run: ${{ matrix.runs.test }}
      - name: '"docker images"'
        run: ${{ matrix.runs.images }}
