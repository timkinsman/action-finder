name: Build
on: [push, pull_request]
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v1
      with:
        fetch-depth: 0
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.102
    - name: Build Reason
      run: "echo ref: ${{github.ref}} event: ${{github.event_name}}"
    - name: Build Version
      id: version
      uses: thefringeninja/action-minver@2.0.0-preview1
      with:
        tag-prefix: v
    - name: Build
      run: dotnet build --configuration Release
    - name: Start Services
      run: docker-compose -f docker-compose.services.yml up -d elasticsearch && docker-compose -f docker-compose.services.yml up ready
    - name: Run Tests
      run: dotnet test --configuration Release --results-directory artifacts --no-build --logger:trx
    - name: Build Docker Images
      if: github.event_name != 'pull_request'
      run: |
        docker build --target api -t ex-api .
        docker build --target job -t ex-job .
    - name: Log in to GitHub Packages
      run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com --username ${{ github.actor }} --password-stdin
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
    - name: Push CI Packages
      if: github.event_name != 'pull_request'
      run: |
        # tag and push docker image
        for image in {"api","job"}; do
          for tag in {${{ steps.version.outputs.version }},latest}; do
            docker tag ex-$image docker.pkg.github.com/exceptionless/exceptionless/$image:$tag
            docker push docker.pkg.github.com/exceptionless/exceptionless/$image:$tag
          done
        done
        for image in {"api","job"}; do
          for tag in {${{ steps.version.outputs.version }},latest}; do
            docker tag ex-$image exceptionless/$image-ci:$tag
            docker push exceptionless/$image-ci:$tag
          done
        done
    - name: Publish Release Packages
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        # tag and push docker image
        for image in {"api","job"}; do
          for tag in {${{ steps.version.outputs.version }},latest}; do
            docker tag ex-$image exceptionless/$image:$tag
            docker push exceptionless/$image:$tag
          done
        done
    - name: Install Helm
      if: github.event_name != 'pull_request'
      uses: azure/setup-helm@v1
      with:
        version: v3.1.0
    - name: Deploy Changes to Development Environment
      if: (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master') && github.event_name != 'pull_request'
      run: |
        az login --service-principal --username ${{ secrets.AZ_USERNAME }} --password ${{ secrets.AZ_PASSWORD }} --tenant ${{ secrets.AZ_TENANT }} --output none
        az aks get-credentials --resource-group exceptionless-v6 --name ex-k8s-v6
        helm upgrade --set "api.image.tag=${{ steps.version.outputs.version }}" --set "jobs.image.tag=${{ steps.version.outputs.version }}" --reuse-values ex-dev --namespace ex-dev ./k8s/exceptionless
    - name: Upload Artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: artifacts
        path: artifacts
