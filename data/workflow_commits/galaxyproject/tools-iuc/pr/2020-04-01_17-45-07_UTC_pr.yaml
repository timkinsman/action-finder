name: Galaxy Tool Linting and Tests for push and PR
on: [push, pull_request]
env:
  GALAXY_REPO: https://github.com/galaxyproject/galaxy
  GALAXY_RELEASE: release_20.01
jobs:
  setup:
    name: Setup cache and determine changed repositories
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - name: ECHO
      run: echo event_name ${{ github.event_name }} sha ${{ github.sha }} ref ${{ github.ref }} 
    - name: ECHO
      run: echo head_ref ${{ github.head_ref }} base_ref ${{ github.head_ref }} pull_request_head_sha ${{ github.event.pull_request.head.sha }}
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v1
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py${{ matrix.python-version }}_${{ env.GALAXY_RELEASE }}
    - name: Determine latest galaxy commit
      run: echo ::set-env name=GALAXY_HEAD_SHA::$(git ls-remote ${{ env.GALAXY_REPO }} refs/heads/${{ env.GALAXY_RELEASE }} | cut -f1)
    - name: Cache .planemo
      uses: actions/cache@v1
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py${{ matrix.python-version }}_${{ env.GALAXY_HEAD_SHA }}
    - name: Install Planemo and flake8
      run: pip install planemo flake8
    - name: Fake a planemo run to update cache
      if: steps.cache-pip.outputs.cache-hit != 'true' || steps.cache-planemo.outputs.cache-hit != 'true'
      run: |
        touch tool.xml
        PIP_QUIET=1 planemo test --galaxy_python_version ${{ matrix.python-version }} --no_conda_auto_init --galaxy_source $GALAXY_REPO --galaxy_branch $GALAXY_RELEASE
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: get all branches
      run: |
        git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
    - name: Determine commit range for feature branch
      if: github.ref != 'refs/heads/master'
      run: echo ::set-env name=COMMIT_RANGE::"origin/master..."

    # for merge commit it is either
    # - a 3 way merge: then the range is determined by the two parents: HEAD^ 
    #   (what was master before the merge) and HEAD^2 (the HEAD of the feature
    #   branch)
    # - a fast forward merge then the commit is what happend wrt to the parent
    #   is the range 
    - name: Determine commit range for merge to master 
      if: github.ref == 'refs/heads/master'
      run: echo ::set-env name=COMMIT_RANGE::${{ github.event.before }}...${{ github.event.after }}
    # $(git rev-parse HEAD^2 &> /dev/null && echo "HEAD^...HEAD^2" || echo "HEAD^")

    - name: more debug
      run: git diff --name-only ${{ env.COMMIT_RANGE }} --
    - name: Planemo ci_find_repos
      run: |
        planemo ci_find_repos --changed_in_commit_range ${{ env.COMMIT_RANGE }} --exclude packages --exclude deprecated --output changed_repositories.list
    - name: Show repo list
      run: cat changed_repositories.list
    - uses: actions/upload-artifact@v1
      with:
        name: Changed repositories
        path: changed_repositories.list

  lint:
    name: Lint tools
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
    steps:
    # checkout the repository to master
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v1
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_python_${{ matrix.python-version }}_${{ env.GALAXY_RELEASE }}
    - name: Setup planemo
      run: pip install planemo
    - uses: actions/download-artifact@v1
      with:
        name: Changed repositories
        path: changed_repositories.list
    - name: Planemo lint
      run: |
        set -e
        while read -r DIR; do
            planemo shed_lint --tools --ensure_metadata --urls --report_level warn --fail_level error --recursive "$DIR";
        done < changed_repositories.list/changed_repositories.list

  flake8:
    name: Lint python scripts
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
    steps:
    # checkout the repository to master
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v1
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_python_${{ matrix.python-version }}_${{ env.GALAXY_RELEASE }}
    - name: Setup flake8 
      run: pip install flake8
    - uses: actions/download-artifact@v1
      with:
        name: Changed repositories
        path: changed_repositories.list
    - name: Flake8
      run: flake8 $(cat changed_repositories.list/changed_repositories.list)

  test:
    name: Test tools
    # This job runs on Linux
    runs-on: ubuntu-latest
    needs: [lint,flake8]
    strategy:
      fail-fast: false
      matrix:
        chunk: [0, 1, 2, 3]
        python-version: [3.7]
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
    # checkout the repository to master
    # and use it as the current working directory
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v1
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_python_${{ matrix.python-version }}_${{ env.GALAXY_RELEASE }}
    - name: Determine latest galaxy commit
      run: echo ::set-env name=GALAXY_HEAD_SHA::$(git ls-remote ${{ env.GALAXY_REPO }} refs/heads/${{ env.GALAXY_RELEASE }} | cut -f1)
    - name: Cache .planemo
      uses: actions/cache@v1
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py${{ matrix.python-version }}_${{ env.GALAXY_HEAD_SHA }}
    - name: Install Planemo
      run: pip install planemo
    - uses: actions/download-artifact@v1
      with:
        name: Changed repositories
        path: changed_repositories.list
    - name: Planemo ci_find_tools
      run: |
        touch changed_repositories_chunk.list changed_tools_chunk.list
        if [ -s changed_repositories.list/changed_repositories.list ]; then
            if [ $(wc -l < changed_repositories.list/changed_repositories.list) -eq 1 ]; then
                planemo ci_find_tools --chunk_count 4 --chunk ${{ matrix.chunk }} \
                               --output changed_tools_chunk.list \
                               $(cat changed_repositories.list/changed_repositories.list)
            else
                planemo ci_find_repos --chunk_count 4 --chunk ${{ matrix.chunk }} \
                               --output changed_repositories_chunk.list \
                               $(cat changed_repositories.list/changed_repositories.list)
            fi
        fi
    - name: Show changed tools/repositories chunk list
      run: cat changed_tools_chunk.list changed_repositories_chunk.list
    - name: Planemo test tools
      run: |
        if [ -s changed_tools_chunk.list ]; then
            PIP_QUIET=1 planemo test --database_connection postgresql://postgres:postgres@localhost:5432/galaxy --biocontainers --no_conda_auto_init --galaxy_source $GALAXY_REPO --galaxy_branch $GALAXY_RELEASE --galaxy_python_version ${{ matrix.python-version }} --test_output_json tool_test_output.json $(cat changed_tools_chunk.list) || true
            docker system prune --all --force --volumes || true
        elif [ -s changed_repositories_chunk.list ]; then
            while read -r DIR; do
                if [[ "$DIR" =~ ^data_managers.* ]]; then
                    TESTPATH=$(planemo ci_find_tools "$DIR")
                else
                    TESTPATH="$DIR"
                fi
                PIP_QUIET=1 planemo test --database_connection postgresql://postgres:postgres@localhost:5432/galaxy --biocontainers --no_conda_auto_init --galaxy_source $GALAXY_REPO --galaxy_branch $GALAXY_RELEASE --galaxy_python_version ${{ matrix.python-version }} --test_output_json "$DIR"/tool_test_output.json "$TESTPATH" || true
                docker system prune --all --force --volumes || true
            done < changed_repositories_chunk.list
        else
            echo '{"tests":[]}' > tool_test_output.json
        fi
    - name: Merge tool_test_output.json files
      run: |
        find . -name tool_test_output.json -exec sh -c 'planemo merge_test_reports "$@" tool_test_output.json' sh {} +
    - name: Create tool_test_output.html
      run: planemo test_reports tool_test_output.json --test_output tool_test_output.html
    - name: Copy artifacts into place
      run: mkdir upload && mv tool_test_output.json tool_test_output.html upload
    - uses: actions/upload-artifact@v1
      with:
        name: 'Tool test output ${{ matrix.chunk  }}'
        path: upload

  # - combine the results of the test chunks (which will never fail due
  #   to `|| true`) and create a global test report as json and html which
  #   is provided as artifact
  # - check if any tool test actually failed (by lookup in the combined json)
  #   and fail this step if this is the case 
  combine_outputs:
    name: Combine chunked test results
    needs: test
    strategy:
      matrix:
        python-version: [3.7]
    # This job runs on Linux
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: Tool test output 0
    - uses: actions/download-artifact@v1
      with:
        name: Tool test output 1
    - uses: actions/download-artifact@v1
      with:
        name: Tool test output 2
    - uses: actions/download-artifact@v1
      with:
        name: Tool test output 3
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v1
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_python_${{ matrix.python-version }}_${{ env.GALAXY_RELEASE }}
    - name: Setup planemo
      run: pip install planemo
    - name: Setup jq
      run: sudo apt-get install jq
    - name: Combine outputs
      run: |
        find . -name tool_test_output.json -exec sh -c 'planemo merge_test_reports "$@" tool_test_output.json' sh {} +
    - name: Create tool_test_output.html
      run: planemo test_reports tool_test_output.json --test_output tool_test_output.html
    - name: Copy artifacts into place
      run: |
        mkdir upload
        mv tool_test_output.json tool_test_output.html upload/
    - uses: actions/upload-artifact@v1
      with:
        name: 'All tool test results'
        path: upload
    - name: Check status of combined status
      run: |
        stat=$(jq '.["tests"][]["data"]["status"]' upload/tool_test_output.json | grep -v "success" || true)
        if [[ "$(echo -n $stat | wc -l)" -gt "0" ]]; then
            echo "unsuccessful tests found $(sort <<<$stat | uniq -c)"
            exit 1
        fi

  deploy:
    name: Deploy
    needs: combine_outputs
    # This job runs on Linux
    strategy:
      matrix:
        python-version: [3.7]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v1
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_python_${{ matrix.python-version }}_${{ env.GALAXY_RELEASE }}
    - name: Setup planemo
      run: pip install planemo
    - uses: actions/download-artifact@v1
      with:
        name: Changed repositories
        path: changed_repositories.list
    # TODO remove --owner
    - name: Deploy on testtoolshed
      env:
        SHED_KEY: ${{ secrets.tts_api_key }}
      run: |
        while read -r DIR;
        do
            planemo shed_update --shed_target testtoolshed --shed_key "${{ env.SHED_KEY }}" --force_repository_creation "$DIR" --owner matthias || exit 1;
        done < changed_repositories.list/changed_repositories.list
    - name: Deploy on toolshed
      env:
        SHED_KEY: ${{ secrets.ts_api_key }}
      run: |
        while read -r DIR;
            do planemo shed_update --shed_target toolshed --shed_key "${{ env.SHED_KEY }}" --force_repository_creation "$DIR" || exit 1;
        done < changed_repositories.list/changed_repositories.list
