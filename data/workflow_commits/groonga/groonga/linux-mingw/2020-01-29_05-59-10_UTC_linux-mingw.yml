name: Linux MinGW
on:
  - push
  - pull_request
jobs:
  package:
    name: Package
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - x86
          - x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y -V \
            autoconf-archive \
            automake1.11 \
            autotools-dev \
            bison \
            cmake \
            gettext \
            libevent-dev \
            libluajit-5.1-dev \
            libmecab-dev \
            libmsgpack-dev \
            mecab-naist-jdic \
            nsis \
            python3-pip \
            rapidjson-dev \
            ruby-dev \
            zip \
            zlib1g-dev
      - name: Install Sphinx
        run: |
          sudo pip3 install Sphinx
      - name: Generate configure
        run: |
          ./autogen.sh
      - name: Configure
        run: |
          ./configure \
            --enable-debug \
            --enable-document \
            --enable-mruby \
            --with-ruby
      - name: Build archive
        run: |
          make dist
      - name: Build
        run: |
          make \
            -C packages/windows \
            ARCHITECTURES=${{ matrix.architecture }} \
            build
      - name: Build zip archive
        run: |
          make \
            -C packages/windows \
            ARCHITECTURES=${{ matrix.architecture }} \
            package
      - name: Build installer
        run: |
          make \
            -C packages/windows \
            installer-${{ matrix.architecture }}

      # Artifact
      - name: Prepare artifacts
        run: |
          mkdir -p windows-mingw-${{ matrix.architecture }}
          mv packages/windows/files/* windows-mingw-${{ matrix.architecture }}/
      - uses: actions/upload-artifact@master
        with:
          name: windows-mingw-${{ matrix.architecture }}
          path: windows-mingw-${{ matrix.architecture }}

      # Release
      - name: Asset
        if: |
          startsWith(github.ref, 'refs/tags/')
        id: asset
        run: |
          version=$(echo ${{ github.ref }} | sed -e 's,^refs/tags/v,,')
          echo ::set-output name=version::${version}
          base_name=groonga-${version}-${{ matrix.architecture }}
          echo ::set-output name=base_name::${base_name}
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          base_name=${{ steps.asset.outputs.base_name }}
          cp -a \
            windows-mingw-${{ matrix.architecture }} \
            ${base_name}
          zip -r \
            ${base_name}.zip
            ${base_name}
      - name: Ensure creating release
        if: |
          startsWith(github.ref, 'refs/tags/')
        id: create-release
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const AsyncFunction = Object.getPrototypeOf(async () => {}).constructor
            const fs = require("fs");
            const path = ".github/workflows/ensure-creating-release.js";
            const script = fs.readFileSync(path).toString();
            const func = new AsyncFunction("require", "github", "context", script);
            return await func(require, github, context);
      - name: Upload to release
        uses: actions/upload-release-asset@v1.0.1
        if: |
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.result }}
          asset_path: ${{ steps.asset.outputs.base_name }}.zip
          asset_name: ${{ steps.asset.outputs.base_name }}.zip
          asset_content_type: application/zip
