name: Nightly Build
on:
  push:
    branches:
      - maven

jobs:
  generate-headers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 11
          java-package: jdk
          architecture: x64

      - name: Generate
        shell: bash
        run: |
          mvn -B --no-transfer-progress compile

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/**/*


  apple-x86_64:
    needs: generate-headers
    runs-on: macos-latest

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}

      - name: Compile
        env:
          CC: clang
          CFLAGS: '-O2 -g -march=x86-64 -mtune=generic -flto -fomit-frame-pointer -fno-stack-protector -pipe'
          LDFLAGS: '-Wl,-dead_strip_dylibs'
        shell: bash
        run: |
          mkdir -p target/build/libuiohook/
          cmake -B target/build/libuiohook/ -S src/external/libuiohook/ \
            -G "Unix Makefiles" \
            -D CMAKE_INSTALL_PREFIX=target/generated-sources/ \
            -D CMAKE_VERBOSE_MAKEFILE=true \
            -D ENABLE_DEMO=OFF -D ENABLE_STATIC=ON -D ENABLE_SHARED=OFF

          cmake --build target/build/libuiohook/ \
            --parallel 2 \
            --clean-first

          cmake --install target/build/libuiohook/

          mkdir -p target/build/jni/
          cmake -B target/build/jni/ \
            -G "Unix Makefiles" \
            -DCMAKE_PREFIX_PATH=target/generated-sources/ \
            -DCMAKE_VERBOSE_MAKEFILE=ON

          cmake --build target/build/jni/ \
            --parallel 2 \
            --clean-first

          cmake --install target/build/jni/

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/src/main/resources/**/*


  linux-arm:
    needs: generate-headers
    runs-on: ubuntu-latest

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}

      - name: Setup
        shell: bash
        run: |
          sudo rm -Rf /etc/apt/sources.list.d
          sudo bash -c 'source /etc/lsb-release && echo "
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME} main universe
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-updates main universe
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-backports main universe

          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports ${DISTRIB_CODENAME} main universe
          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports ${DISTRIB_CODENAME}-updates main universe
          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports ${DISTRIB_CODENAME}-backports main universe
          " > /etc/apt/sources.list'

          sudo dpkg --add-architecture armhf
          sudo apt-get update -m

          sudo apt-get install \
            binutils-arm-linux-gnueabihf \
            gcc-arm-linux-gnueabihf

          sudo apt-get install \
            libx11-dev:armhf \
            libxtst-dev:armhf \
            libxt-dev:armhf \
            libxinerama-dev:armhf \
            libx11-xcb-dev:armhf \
            libxkbcommon-dev:armhf \
            libxkbcommon-x11-dev:armhf \
            libxkbfile-dev:armhf

      - name: Compile
        env:
          CC: arm-linux-gnueabihf-gcc
          CFLAGS: '-Os -march=armv7ve -mfpu=vfp -mfloat-abi=hard -g -flto -fomit-frame-pointer -fno-stack-protector -pipe'
          LDFLAGS: '-fuse-ld=gold -Wl,-O1 -Wl,--as-needed'
          PKG_CONFIG_PATH: '/usr/lib/arm-linux-gnueabihf/pkgconfig'
        shell: bash
        run: |
          mkdir -p target/build/libuiohook/
          cmake -B target/build/libuiohook/ -S src/external/libuiohook/ \
            -G "Unix Makefiles" \
            -D CMAKE_INSTALL_PREFIX=target/generated-sources/ \
            -D CMAKE_VERBOSE_MAKEFILE=true \
            -D ENABLE_DEMO=OFF -D ENABLE_STATIC=ON -D ENABLE_SHARED=OFF

          cmake --build target/build/libuiohook/ \
            --parallel 2 \
            --clean-first

          cmake --install target/build/libuiohook/

          mkdir -p target/build/jni/
          cmake -B target/build/jni/ \
            -G "Unix Makefiles" \
            -DCMAKE_PREFIX_PATH=target/generated-sources/ \
            -DCMAKE_VERBOSE_MAKEFILE=ON

          cmake --build target/build/jni/ \
            --parallel 2 \
            --clean-first

          cmake --install target/build/jni/

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/src/main/resources/**/*

  linux-x86:
    needs: generate-headers
    runs-on: ubuntu-latest

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}

      - name: Setup
        shell: bash
        run: |
          sudo rm -Rf /etc/apt/sources.list.d
          sudo bash -c 'source /etc/lsb-release && echo "
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME} main universe
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-updates main universe
          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-backports main universe
          " > /etc/apt/sources.list'

          sudo dpkg --add-architecture i386
          sudo apt-get update -m

          sudo apt-get install \
            binutils-i686-linux-gnu \
            gcc-i686-linux-gnu

          sudo apt-get install \
            libx11-dev:i386 \
            libxtst-dev:i386 \
            libxt-dev:i386 \
            libxinerama-dev:i386 \
            libx11-xcb-dev:i386 \
            libxkbcommon-dev:i386 \
            libxkbcommon-x11-dev:i386 \
            libxkbfile-dev:i386

      - name: Compile
        env:
          CC: i686-linux-gnu-gcc
          CFLAGS: '-O2 -march=i686 -mtune=generic -g -fomit-frame-pointer -flto -fno-stack-protector -pipe'
          LDFLAGS: '-fuse-ld=gold -Wl,-O1 -Wl,--as-needed'
          PKG_CONFIG_PATH: '/usr/lib/i386-linux-gnu/pkgconfig'
        shell: bash
        run: |
          mkdir -p target/build/libuiohook/
          cmake -B target/build/libuiohook/ -S src/external/libuiohook/ \
            -G "Unix Makefiles" \
            -D CMAKE_INSTALL_PREFIX=target/generated-sources/ \
            -D CMAKE_VERBOSE_MAKEFILE=true \
            -D ENABLE_DEMO=OFF -D ENABLE_STATIC=ON -D ENABLE_SHARED=OFF

          cmake --build target/build/libuiohook/ \
            --parallel 2 \
            --clean-first

          cmake --install target/build/libuiohook/

          mkdir -p target/build/jni/
          cmake -B target/build/jni/ \
            -G "Unix Makefiles" \
            -DCMAKE_PREFIX_PATH=target/generated-sources/ \
            -DCMAKE_VERBOSE_MAKEFILE=ON

          cmake --build target/build/jni/ \
            --parallel 2 \
            --clean-first

          cmake --install target/build/jni/

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/src/main/resources/**/*

  linux-x86_64:
    needs: generate-headers
    runs-on: ubuntu-latest

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}

      - name: Setup
        shell: bash
        run: |
          sudo apt-get install \
            libx11-dev:amd64 \
            libxtst-dev:amd64 \
            libxt-dev:amd64 \
            libxinerama-dev:amd64 \
            libx11-xcb-dev:amd64 \
            libxkbcommon-dev:amd64 \
            libxkbcommon-x11-dev:amd64 \
            libxkbfile-dev:amd64

      - name: Compile
        env:
          CC: x86_64-linux-gnu-gcc
          CFLAGS: '-O2 -march=x86-64 -mtune=generic -g -fomit-frame-pointer -flto -fno-stack-protector -pipe'
          LDFLAGS: '-fuse-ld=gold -Wl,-O1 -Wl,--as-needed'
          PKG_CONFIG_PATH: '/usr/lib/x86_64-linux-gnu/pkgconfig'
        shell: bash
        run: |
          mkdir -p target/build/libuiohook/
          cmake -B target/build/libuiohook/ -S src/external/libuiohook/ \
            -G "Unix Makefiles" \
            -D CMAKE_INSTALL_PREFIX=target/generated-sources/ \
            -D CMAKE_VERBOSE_MAKEFILE=true \
            -D ENABLE_DEMO=OFF -D ENABLE_STATIC=ON -D ENABLE_SHARED=OFF

          cmake --build target/build/libuiohook/ \
            --parallel 2 \
            --clean-first

          cmake --install target/build/libuiohook/

          mkdir -p target/build/jni/
          cmake -B target/build/jni/ \
            -G "Unix Makefiles" \
            -DCMAKE_PREFIX_PATH=target/generated-sources/ \
            -DCMAKE_VERBOSE_MAKEFILE=ON

          cmake --build target/build/jni/ \
            --parallel 2 \
            --clean-first

          cmake --install target/build/jni/

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/src/main/resources/**/*


  windows-arm:
    needs: generate-headers
    runs-on: windows-latest

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}

      - name: Setup
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm

      - name: Compile
        shell: cmd
        run: |
          md target\build\libuiohook\
          cmake -B target\build\libuiohook\  -S src\external\libuiohook\ ^
            -G "Visual Studio 16 2019" -A ARM ^
            -D CMAKE_INSTALL_PREFIX=target\generated-sources\ ^
            -D CMAKE_VERBOSE_MAKEFILE=OFF ^
            -D ENABLE_DEMO=OFF -D ENABLE_STATIC=ON -D ENABLE_SHARED=OFF

          cmake --build target\build\libuiohook\ ^
            --parallel 2 ^
            --config RelWithDebInfo ^
            --clean-first

          cmake --install target\build\libuiohook\ --config RelWithDebInfo

          md target\build\jni\
          cmake -B target\build\jni\ ^
            -G "Visual Studio 16 2019" -A ARM ^
            -D CMAKE_PREFIX_PATH=target\generated-sources\ ^
            -D CMAKE_SYSTEM_NAME=windows ^
            -D CMAKE_SYSTEM_PROCESSOR=arm ^
            -D CMAKE_VERBOSE_MAKEFILE=OFF

          cmake --build target\build\jni\ ^
            --parallel 2 ^
            --clean-first

          cmake --install target\build\jni\

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/src/main/resources/**/*

  windows-x86:
    needs: generate-headers
    runs-on: windows-latest

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}

      - name: Setup
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_x86

      - name: Compile
        shell: cmd
        run: |
          cmake -B ${{github.workspace}}\build ^
            -G "Visual Studio 16 2019" -A Win32 ^
            -D CMAKE_INSTALL_PREFIX=${{github.workspace}}\dist\windows\x86 ^
            -D CMAKE_VERBOSE_MAKEFILE=true ^
            -D ENABLE_DEMO=OFF -D ENABLE_STATIC=ON -D ENABLE_SHARED=OFF

          cmake --build ${{github.workspace}}\build ^
            --parallel 2 ^
            --config RelWithDebInfo ^
            --clean-first

          cmake --install ${{github.workspace}}\build --config RelWithDebInfo

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/dist/**/*

  windows-x86_64:
    needs: generate-headers
    runs-on: windows-latest

    steps:
      - name: Download
        uses: actions/download-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}

      - name: Setup
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Compile
        shell: cmd
        run: |
          cmake -B ${{github.workspace}}\build ^
            -G "Visual Studio 16 2019" -A x64 ^
            -D CMAKE_INSTALL_PREFIX=${{github.workspace}}\dist\windows\x86_64 ^
            -D CMAKE_VERBOSE_MAKEFILE=true ^
            -D ENABLE_DEMO=OFF -D ENABLE_STATIC=ON -D ENABLE_SHARED=OFF

          cmake --build ${{github.workspace}}\build ^
            --parallel 2 ^
            --config RelWithDebInfo ^
            --clean-first

          cmake --install ${{github.workspace}}\build --config RelWithDebInfo

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: nightly-build
          path: ${{github.workspace}}/dist/**/*



#  build-apple-x86_64:
#    needs: generate-headers
#    runs-on: macos-latest
#    steps:
#      - name: Download
#        uses: actions/download-artifact@v2
#        with:
#          name: nightly-build
#          path: ${{github.workspace}}
#
#      - name: Compile x86_64
#        shell: bash
#        env:
#          CC: clang
#          CFLAGS: '-O2 -march=x86-64 -mtune=generic -fomit-frame-pointer -flto -fno-stack-protector -pipe'
#        run: |
#          mkdir -p target/build-apple-x86_64/
#          cmake -B target/build-apple-x86_64/ \
#            -DCMAKE_VERBOSE_MAKEFILE=ON \
#            -DCMAKE_SYSTEM_NAME=darwin \
#            -DCMAKE_SYSTEM_PROCESSOR=x86_64
#
#          cmake --build target/build-apple-x86_64/ \
#            --parallel 2 \
#            --clean-first
#
#          cmake --install target/build-jni/
#
#
#      - name: Upload
#        uses: actions/upload-artifact@v2
#        with:
#          name: nightly-build
#          path: ${{github.workspace}}/**/*
#
#  build-linux:
#    needs: generate-headers
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download
#        uses: actions/download-artifact@v2
#        with:
#          name: nightly-build
#          path: ${{github.workspace}}
#
#      - name: Setup
#        shell: bash
#        run: |
#          sudo bash -c 'source /etc/lsb-release && echo "
#          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME} main universe
#          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-updates main universe
#          deb [arch=amd64,i386] http://us.archive.ubuntu.com/ubuntu ${DISTRIB_CODENAME}-backports main universe
#
#          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports ${DISTRIB_CODENAME} main universe
#          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports ${DISTRIB_CODENAME}-updates main universe
#          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports ${DISTRIB_CODENAME}-backports main universe
#          " > /etc/apt/sources.list'
#
#          sudo rm -Rf /etc/apt/sources.list.d
#
#          sudo dpkg --add-architecture i386
#          sudo dpkg --add-architecture armhf
#
#          sudo apt-get update -m
#
#          sudo apt-get install cmake
#
#          #sudo apt-get install \
#            #binutils-x86-64-linux-gnu:amd64  \
#            #gcc-x86-64-linux-gnu:amd64
#
#          sudo apt-get install \
#            libx11-dev:amd64 \
#            libxtst-dev:amd64 \
#            libxt-dev:amd64 \
#            libxinerama-dev:amd64 \
#            libx11-xcb-dev:amd64 \
#            libxkbcommon-dev:amd64 \
#            libxkbcommon-x11-dev:amd64 \
#            libxkbfile-dev:amd64
#
#
#          sudo apt-get install \
#            binutils-i686-linux-gnu \
#            gcc-i686-linux-gnu
#
#          sudo apt-get install \
#            libx11-dev:i386 \
#            libxtst-dev:i386 \
#            libxt-dev:i386 \
#            libxinerama-dev:i386 \
#            libx11-xcb-dev:i386 \
#            libxkbcommon-dev:i386 \
#            libxkbcommon-x11-dev:i386 \
#            libxkbfile-dev:i386
#
#
#          sudo apt-get install \
#            binutils-arm-linux-gnueabihf \
#            gcc-arm-linux-gnueabihf
#
#          sudo apt-get install \
#            libx11-dev:armhf \
#            libxtst-dev:armhf \
#            libxt-dev:armhf \
#            libxinerama-dev:armhf \
#            libx11-xcb-dev:armhf \
#            libxkbcommon-dev:armhf \
#            libxkbcommon-x11-dev:armhf \
#            libxkbfile-dev:armhf

#      - name: Compile armv7ve
#        shell: bash
#        env:
#          CC: arm-linux-gnueabihf-gcc
#          CFLAGS: '-Os -march=armv7ve -mfpu=vfp -mfloat-abi=hard -flto -fomit-frame-pointer -fno-stack-protector -g -pipe'
#          LDFLAGS: '-Wl,-O1 -Wl,--as-needed'
#        run: |
#          mkdir -p target/build-jni/
#          cmake -B target/build-jni/ \
#            -DCMAKE_VERBOSE_MAKEFILE=ON \
#            -DCMAKE_SYSTEM_NAME=linux \
#            -DCMAKE_SYSTEM_PROCESSOR=arm
#
#          cmake --build target/build-jni/ \
#            --parallel 2 \
#            --clean-first
#
#          cmake --install target/build-jni/
#
#      - name: Compile i586
#        shell: bash
#        env:
#          CC: i686-linux-gnu-gcc
#          CFLAGS: '-O2 -march=i586 -mtune=generic -fomit-frame-pointer -flto -fno-stack-protector -pipe'
#          LDFLAGS: '-Wl,-O1 -Wl,--as-needed'
#        run: |
#          mkdir -p target/build-jni/
#          cmake -B target/build-jni/ \
#            -DCMAKE_VERBOSE_MAKEFILE=ON \
#            -DCMAKE_SYSTEM_NAME=linux \
#            -DCMAKE_SYSTEM_PROCESSOR=x86
#
#          cmake --build target/build-jni/ \
#            --parallel 2 \
#            --clean-first
#
#          cmake --install target/build-jni/

#      - name: Compile x86_64
#        shell: bash
#        env:
#          CC: x86_64-linux-gnu-gcc
#          CFLAGS: '-O2 -march=x86-64 -mtune=generic -fomit-frame-pointer -flto -fno-stack-protector -pipe'
#          LDFLAGS: '-Wl,-O1 -Wl,--as-needed'
#        run: |
#          mkdir -p target/build/libuiohook/
#          cmake -B target/build/libuiohook/ -S src/external/libuiohook \
#            -G "Unix Makefiles" \
#            -D CMAKE_INSTALL_PREFIX=target/generated-sources/ \
#            -D CMAKE_VERBOSE_MAKEFILE=true \
#            -D ENABLE_DEMO=OFF -D ENABLE_STATIC=ON -D ENABLE_SHARED=OFF
#
#          cmake --build target/build/libuiohook/ \
#            --parallel 2 \
#            --clean-first
#
#          cmake --install target/build/libuiohook/
#
#
#          mkdir -p target/build/jni/
#          cmake -B target/build/jni/ \
#            -G "Unix Makefiles" \
#            -DCMAKE_PREFIX_PATH=target/generated-sources/ \
#            -DCMAKE_VERBOSE_MAKEFILE=ON
#
#          cmake --build target/build/jni/ \
#            --parallel 2 \
#            --clean-first
#
#          cmake --install target/build/jni/
#
#      - name: Upload
#        uses: actions/upload-artifact@v2
#        with:
#          name: nightly-build
#          path: ${{github.workspace}}/**/*

#
#  build_windows:
#    needs: generate_headers
#    runs-on: windows-latest
#    steps:
#      - name: Download
#        uses: actions/download-artifact@v2
#        with:
#          name: nightly-build
#          path: ${{github.workspace}}
#
#      - name: Setup arm7ve
#        uses: ilammy/msvc-dev-cmd@v1
#        with:
#          arch: amd64_arm
#
#      - name: Compile arm7ve
#        env:
#          CFLAGS: '/arch:ARMv7VE /O1 /Oy'
#          CMAKE_GENERATOR: 'Visual Studio 16 2019'
#          CMAKE_GENERATOR_PLATFORM: 'ARM'
#        shell: cmd
#        run: |
#          mkdir -p target/build-jni/
#          cmake -B target/build-jni/ ^
#            -DCMAKE_VERBOSE_MAKEFILE=ON ^
#            -DCMAKE_SYSTEM_NAME=windows ^
#            -DCMAKE_SYSTEM_PROCESSOR=arm
#
#          cmake --build target/build-jni/ ^
#            --parallel 2 ^
#            --clean-first
#
#          cmake --install target/build-jni/
#
#      - name: Setup i586
#        uses: ilammy/msvc-dev-cmd@v1
#        with:
#          arch: amd64_x86
#
#      - name: Compile i586
#        env:
#          CFLAGS: '/O2 /Oy'
#          CMAKE_GENERATOR: 'Visual Studio 16 2019'
#          CMAKE_GENERATOR_PLATFORM: 'Win32'
#        shell: cmd
#        run: |
#          mkdir -p target/build-jni/
#          cmake -B target/build-jni/ ^
#            -DCMAKE_VERBOSE_MAKEFILE=ON ^
#            -DCMAKE_SYSTEM_NAME=windows ^
#            -DCMAKE_SYSTEM_PROCESSOR=x86
#
#          cmake --build target/build-jni/ ^
#            --parallel 2 ^
#            --clean-first
#
#          cmake --install target/build-jni/
#
#      - name: Setup x86_64
#        uses: ilammy/msvc-dev-cmd@v1
#        with:
#          arch: x64
#
#      - name: Compile x86_64
#        env:
#          CFLAGS: '/O2 /Oy'
#          CMAKE_GENERATOR: 'Visual Studio 16 2019'
#          CMAKE_GENERATOR_PLATFORM: 'x64'
#        shell: cmd
#        run: |
#          mkdir -p target/build-jni/
#          cmake -B target/build-jni/ ^
#            -DCMAKE_VERBOSE_MAKEFILE=ON ^
#            -DCMAKE_SYSTEM_NAME=windows ^
#            -DCMAKE_SYSTEM_PROCESSOR=x86_64
#
#          cmake --build target/build-jni/ ^
#            --parallel 2 ^
#            --clean-first
#
#          cmake --install target/build-jni/
#
#      - name: Upload
#        uses: actions/upload-artifact@v2
#        with:
#          name: nightly-build
#          path: ${{github.workspace}}/**/*

#
#  package:
##    needs: [build_apple, build_linux, build_windows]
#    needs: [build-linux]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download
#        uses: actions/download-artifact@v2
#        with:
#          name: nightly-build
#          path: ${{github.workspace}}
#
#      - name: Setup Java
#        uses: actions/setup-java@v1
#        with:
#          java-version: 11
#          java-package: jdk
#          architecture: x64
#
#      - name: Package
#        shell: bash
#        run: |
#          mvn -B --no-transfer-progress deploy
#
#      - name: Upload
#        uses: actions/upload-artifact@v2
#        with:
#          name: nightly-jars
#          path: ${{github.workspace}}/**/*
