# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        
    ## Build-Number
    - name: Generate build number
      id: buildnumber
      uses: einaregilsson/build-number@v1 
      with:
        token: ${{secrets.GITHUB_TOKEN}}
    - name: Print new build number
      run: echo Build number is $BUILD_NUMBER
    
    ## Build with maven
    - name: Prepare maven settings
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        mkdir -p ~/.m2
        echo "<settings><servers><server><id>>maven2.levigo.de</id><username>${NEXUS_USERID}</username><password>${NEXUS_PASSWORD}</password></server></servers></settings>" > ~/.m2/settings.xml 
 
    - name: Set version
      id: version
      run: |
        export project_version=$(mvn help:evaluate -N -Dexpression=project.version | grep -v '\[' | tail -1 | sed -r -e 's/[-.](snapshot|local)$//i' -e 's/\s+//g')
        export release_version=${project_version}.${{ steps.buildnumber.outputs.build_number }}
        echo ::set-output name=release_version::${release_version}
        echo Truncated version found to be ${project_version}, releasing as ${release_version}
        mvn versions:set -DnewVersion=${release_version} 
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./target/jadice-server-converter-client-*.exe
        asset_name: jadice-server-converter-client-*.exe
        asset_content_type: application/octet-stream 
