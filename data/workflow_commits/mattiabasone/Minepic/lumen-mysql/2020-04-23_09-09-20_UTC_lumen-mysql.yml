# GitHub Action for Lumen with MySQL and Redis
name: Testing App (Lumen with MySQL)
on: [push, pull_request]
jobs:
  lumen:
    name: Lumen (PHP ${{ matrix.php-versions }})
    runs-on: ubuntu-latest
    env:
      DB_HOST: 127.0.0.1
      DB_DATABASE: app
      DB_USERNAME: root
      DB_PASSWORD: password
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: app
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.4']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          tools: pecl
          extensions: mbstring, dom, fileinfo, mysql, imagick, swoole
          coverage: xdebug
      - name: Start mysql service
        run: sudo /etc/init.d/mysql start
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Composer dependencies
        run: |
          composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
          composer require predis/predis
      - name: Prepare the application
        run: php -r "file_exists('.env') || copy('.env.ci_testing', '.env');"
      - name: Register Redis as service provider
        run: sed -i '$i\$app->register(Illuminate\\Redis\\RedisServiceProvider::class);' bootstrap/app.php
      - name: Run Migration and Seeders
        run: |
          php artisan migrate -v
          php artisan db:seed
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      - name: Test with phpunit
        run: vendor/bin/phpunit --configuration phpunit-ci.xml --coverage-text --coverage-clover clover.xml
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      - name: "[Coveralls] Extract branch name"
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: "[Coveralls] Checkout branch"
        shell: bash
        run: git fetch && git checkout ${{ steps.extract_branch.outputs.branch }}
      - name: "[Coveralls] Send report"
        run: vendor/bin/php-coveralls -v -x clover.xml -o coveralls-upload.json
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
