name: "VAST"
on:
  push:
    branches:
    - master
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
    - '**.md'
    - '!doc/**.md'
    - examples
    - pyvast
    - systemd
    - .github/workflows/jupyter.yaml
    - .github/workflows/pyvast.yaml
  release:
    types: published
env:
  DEBIAN_FRONTEND: noninteractive
jobs:

  build:
    name: ${{ matrix.os.tag }} ${{ matrix.os.compiler }} ${{ matrix.configure.tag }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - tag: Ubuntu
          name: ubuntu-20.04
          extra-flags:
          compiler: GCC
          cc: gcc-9
          cxx: g++-9
        - tag: Ubuntu
          name: ubuntu-20.04
          extra-flags:
          compiler: Clang
          cc: clang-9
          cxx: clang++-9
        - tag: macOS
          name: macOS-latest
          extra-flags:
          compiler: AppleClang
          cc: clang
          cxx: clang++
        configure:
        - tag: Release
          flags: --release
          ci-flags: --ci-build
    runs-on: ${{ matrix.os.name }}
    env:
      CC: ${{ matrix.os.cc }}
      CXX: ${{ matrix.os.cxx }}
      CMAKE_GENERATOR: Ninja
      CMAKE_MAKE_PROGRAM: ninja
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CCACHE_HASH_DIR: true
      CCACHE_UNIFY: true
      CCACHE_SLOPPINESS: 'file_macro,time_macros'
      CCACHE_DIR: '${{ github.workspace }}/.ccache'
      CCACHE_COMPRESS: true
      CCACHE_COMPRESSLEVEL: 6
      BUILD_DIR: build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch Submodules and Tags
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive
          git fetch origin +refs/tags/*:refs/tags/*

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'

      - name: Configure GCloud Credentials
        if: matrix.os.tag != 'macOS'
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '275.0.0'
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Install Dependencies (Ubuntu)
        if: matrix.os.tag == 'Ubuntu'
        run: |
          sudo apt-get -qq update
          sudo apt-get -qqy install ninja-build libpcap-dev libssl-dev lsb-release ccache libflatbuffers-dev libyaml-cpp-dev
          # Install Apache Arrow (c.f. https://arrow.apache.org/install/)
          wget https://apache.bintray.com/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-archive-keyring-latest-$(lsb_release --codename --short).deb
          sudo apt-get -qqy install ./apache-arrow-archive-keyring-latest-$(lsb_release --codename --short).deb
          sudo apt-get -qq update
          sudo apt-get -qqy install libarrow-dev

      - name: Install Dependencies (macOS)
        if: matrix.os.tag == 'macOS'
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ github.token }}
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          brew --version
          brew install libpcap tcpdump rsync pandoc apache-arrow pkg-config ninja ccache gnu-sed flatbuffers yaml-cpp

      - name: Configure Environment
        id: configure_env
        run: |
          PACKAGE_NAME="$(echo "vast-$(git describe)-$(uname -s)-${{ matrix.configure.tag }}-${{ matrix.os.compiler }}" | awk '{ print tolower($0) }')"
          PUBLISH_NAME="$(echo "vast-$(uname -s)-${{ matrix.configure.tag }}-${{ matrix.os.compiler }}" | awk '{ print tolower($0) }')"
          BUILD_DIR="build"
          ## The upload artifact action cannot resolve environment variables.
          echo "::set-output name=package_name::$PACKAGE_NAME"
          echo "::set-output name=publish_name::$PUBLISH_NAME"
          echo "::set-output name=build_dir::$BUILD_DIR"
          echo "::set-env name=PACKAGE_NAME::$PACKAGE_NAME"
          echo "::set-env name=BUILD_DIR::$BUILD_DIR"
          # Export slug variables for the cache action.
          slug_ref() {
            echo "$1" |
              tr "[:upper:]" "[:lower:]" |
              ${{ matrix.os.tag == 'macOS' && 'gsed' || 'sed' }} -r 's#refs/[^\/]*/##;s/[~\^]+//g;s/[^a-zA-Z0-9.]+/-/g;s/^-+\|-+$//g;s/^-*//;s/-*$//' |
              cut -c1-63
          }
          echo ::set-env name=CACHE_REF_SLUG::"$(slug_ref "$GITHUB_REF")"
          echo ::set-env name=CACHE_HEAD_REF_SLUG::"$(slug_ref "$GITHUB_HEAD_REF")"
          echo ::set-env name=CACHE_BASE_REF_SLUG::"$(slug_ref "$GITHUB_BASE_REF")"

      # For 'pull_request' events we want to take the latest build on the PR
      # branch, or if that fails the latest build from the branch we're merging
      # into.
      - name: Fetch ccache Cache (Pull Request)
        if: github.event_name == 'pull_request'
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}-${{ env.CACHE_HEAD_REF_SLUG }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}-${{ env.CACHE_HEAD_REF_SLUG }}
            ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}-${{ env.CACHE_BASE_REF_SLUG }}
            ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}

      # For 'push' events we want to take the latest build on the branch we pushed to.
      - name: Fetch ccache Cache (Push)
        if: github.event_name == 'push'
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}-${{ env.CACHE_REF_SLUG }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}-${{ env.CACHE_REF_SLUG }}
            ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}

      # For 'release' events we want to take the latest master build.
      - name: Fetch ccache Cache (Release)
        if: github.event_name == 'release'
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}-master-${{ github.sha }}
          restore-keys: |
            ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}-master
            ccache-${{ matrix.os.tag }}-${{ matrix.os.compiler }}-${{ matrix.configure.tag }}

      - name: Configure
        run: |
          python --version
          pip --version
          "$CC" --version
          "$CXX" --version
          ccache --version
          # Zero the cache statistics (but not the configuration options).
          ccache --zero-stats
          ccache --show-config
          ./configure \
            --prefix="${PWD}/opt/vast" \
            --build-dir="$BUILD_DIR" \
            --package-name="$PACKAGE_NAME" \
            ${{ matrix.os.extra-flags }} \
            ${{ github.event.action == 'published' && matrix.configure.flags || matrix.configure.ci-flags }}

      - name: Compile All Targets
        run: |
          cmake --build "$BUILD_DIR" --target all

      - name: Show ccache Statistics
        run: |
          # Print statistics counter IDs and corresponding values.
          ccache --show-stats

      - name: Run Unit Tests
        env:
          CTEST_OUTPUT_ON_FAILURE: YES
        run: |
          cmake --build "$BUILD_DIR" --target test

      - name: Run Integration Tests
        id: integration_test_step
        run: |
          echo "::set-output name=status::true"
          if ! cmake --build "$BUILD_DIR" --target integration; then
            echo "::set-output name=status::false"
            tar -czf "$PACKAGE_NAME.tar.gz" -C build vast-integration-test
            exit 1
          fi

      - name: Upload Integration Test Logs on Failure
        if: failure() && steps.integration_test_step.outputs.status == 'false'
        uses: actions/upload-artifact@v1
        with:
          name: "${{ steps.configure_env.outputs.package_name }}.tar.gz"
          path: "${{ steps.configure_env.outputs.package_name }}.tar.gz"

      - name: Install
        run: |
          cmake --build "$BUILD_DIR" --target install

      - name: Package
        env:
          DESTDIR: $PWD
        run: |
          cmake --build "$BUILD_DIR" --target package

      - name: Upload Artifact to Github
        uses: actions/upload-artifact@v1
        with:
          name: "${{ steps.configure_env.outputs.package_name }}.tar.gz"
          path: "${{ steps.configure_env.outputs.build_dir }}/${{ steps.configure_env.outputs.package_name }}.tar.gz"

      - name: Upload Artifact to GCS
        if: matrix.os.tag != 'macOS' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags'))
        run: |
          gsutil -m cp "$BUILD_DIR/$PACKAGE_NAME.tar.gz" "gs://${{ secrets.GCS_BUCKET }}"

      - name: Publish Docker Image
        if: ( github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags') ) && matrix.os.tag == 'Ubuntu' && matrix.os.compiler == 'GCC' && matrix.configure.tag == 'Release'
        uses: elgohr/Publish-Docker-Github-Action@2.12
        with:
          name: tenzir/vast
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          dockerfile: Dockerfile_prebuilt

      - name: Publish to GitHub Release
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "${{ steps.configure_env.outputs.build_dir }}/${{ steps.configure_env.outputs.package_name }}.tar.gz"
          # The asset names are constant so we can permanently link to
          # https://github.com/tenzir/vast/releases/latest/download/vast-ubuntu-release-gcc.tar.gz
          # https://github.com/tenzir/vast/releases/latest/download/vast-ubuntu-release-clang.tar.gz
          # https://github.com/tenzir/vast/releases/latest/download/vast-darwin-release-appleclang.tar.gz
          # for builds of the latest release.
          asset_name: "${{ steps.configure_env.outputs.publish_name }}.tar.gz"
          asset_content_type: application/gzip
