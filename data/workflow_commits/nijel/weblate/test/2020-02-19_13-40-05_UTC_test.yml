name: Test

on:
  push:
    paths:
      - 'weblate/**'
      - '*.py'
      - 'requirements*.txt'
      - 'ci/*'
      - '.github/workflows/test.yml'
  pull_request:
    paths:
      - 'weblate/**'
      - '*.py'
      - 'requirements*.txt'
      - 'ci/*'
      - '.github/workflows/test.yml'

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]
        requirements: ["latest", "minimal", "edge"]
        database: ["postgresql", "sqlite"]
        exclude:
          # Reduce testing for sqlite
          - python-version: 3.5
            requirements: "minimal"
            database: "sqlite"
          - python-version: 3.6
            requirements: "minimal"
            database: "sqlite"
          - python-version: 3.8
            requirements: "minimal"
            database: "sqlite"
          - python-version: 3.5
            requirements: "latest"
            database: "sqlite"
          - python-version: 3.6
            requirements: "latest"
            database: "sqlite"
          - python-version: 3.8
            requirements: "latest"
            database: "sqlite"
          # No working combination of psycopg2 and Django 2.2 on Python 3.8
          - python-version: 3.8
            requirements: "minimal"
            database: "postgresql"
          # Reduce amount of testing for edge
          - python-version: 3.5
            requirements: "edge"
            database: "sqlite"
          - python-version: 3.6
            requirements: "edge"
            database: "sqlite"
          - python-version: 3.7
            requirements: "edge"
            database: "sqlite"
          - python-version: 3.8
            requirements: "edge"
            database: "sqlite"
          - python-version: 3.6
            requirements: "edge"
            database: "postgresql"
          - python-version: 3.7
            requirements: "edge"
            database: "postgresql"
    name: py${{ matrix.python-version }}, ${{ matrix.database }}, ${{ matrix.requirements }} deps

    services:
      redis:
        image: redis:5-alpine
        ports:
          - 6379/tcp
      postgres:
        image: postgres:11
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

    steps:
    - uses: actions/checkout@v2
    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install apt dependencies
      run: sudo ./ci/apt-install
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install pip dependencies
      run: ./ci/pip-install ${{ matrix.requirements }}
    - name: Test with Django
      env:
        CI_DATABASE: ${{ matrix.database }}
        CI_DB_PASSWORD: "postgres"
        CI_DB_HOST: "127.0.0.1"
        CI_DB_PORT: ${{ job.services.postgres.ports['5432'] }}
        CI_SELENIUM: "1"
        DJANGO_SETTINGS_MODULE: "weblate.settings_test"

      run: |
        ./ci/prepare-database
        ./ci/run-test
    - name: Coverage
      run: |
        coverage combine
        coverage xml
    - uses: codecov/codecov-action@v1
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        flags: unittests
    - name: DeepSource
      env:
        DEEPSOURCE_DSN: https://c2c2d54f2be9498e94048d17dc8e3965@deepsource.io
      run: |
        curl https://deepsource.io/cli | sh
        ./bin/deepsource report --analyzer test-coverage --key python --value-file ./coverage.xml
    - uses: actions/upload-artifact@v1
      with:
        name: Screenshots
        path: test-images
