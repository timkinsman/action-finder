name: continuous-integration

# TODO: build master branch after PRs are merged.
# syntax https://help.github.com/en/articles/workflow-syntax-for-github-actions
on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  windows:
    name: Windows

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install Doxygen
      # choco install doxygen.portable # <-- too unreliable.
      run: |
        (New-Object System.Net.WebClient).DownloadFile("https://sourceforge.net/projects/myosin/files/doxygen-1.8.14.windows.x64.bin.zip/download", "doxygen.zip")
        7z x $env:GITHUB_WORKSPACE/doxygen.zip -odoxygen
        echo "::add-path::$env:GITHUB_WORKSPACE\\doxygen"

    - name: Install Python packages
      # Need numpy to use SWIG numpy typemaps.
      run: python -m pip install numpy

    - name: Install SWIG
      run: choco install swig --version 3.0.12 --yes --limit-output

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v1
      with:
        path: ~/opensim_dependencies_install
        # Every time a cache is created, it's stored with this key.
        # In subsequent runs, if the key matches the key of an existing cache,
        # then the cache is used. We chose for this key to depend on the
        # operating system and a hash of the hashes of all files in the
        # dependencies directory (non-recursive).
        # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
        key: ${{ runner.os }}-dependencies-${{ hashFiles('dependencies/*') }}

    - name: Build dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        echo $env:GITHUB_WORKSPACE\\build_deps
        mkdir $env:GITHUB_WORKSPACE\\build_deps
        chdir $env:GITHUB_WORKSPACE\\build_deps
        # /W0 disables warnings.
        # https://msdn.microsoft.com/en-us/library/19z1t1wy.aspx
        cmake -E env CXXFLAGS="/W0" cmake $env:GITHUB_WORKSPACE/dependencies -LAH -G"Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX=~/opensim_dependencies_install -DSUPERBUILD_ezc3d=ON
        cmake --build . --config Release -- /maxcpucount:4

    - name: Configure opensim-core
      run: |
        mkdir $env:GITHUB_WORKSPACE\\build
        chdir $env:GITHUB_WORKSPACE\\build
        # TODO: Can remove /WX when we use that in CMakeLists.txt.
        # Set the CXXFLAGS environment variable to turn warnings into errors.
        # Skip timing test section included by default
        cmake -E env CXXFLAGS="/WX -DSKIP_TIMING" cmake $env:GITHUB_WORKSPACE -LAH -G"Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX=~/opensim-core-install -DOPENSIM_DEPENDENCIES_DIR=~/opensim_dependencies_install -DOPENSIM_C3D_PARSER=ezc3d -DBUILD_PYTHON_WRAPPING=on -DBUILD_JAVA_WRAPPING=on

    - name: Build opensim-core
        chdir $env:GITHUB_WORKSPACE\\build
        cmake --build . --config Release -- /maxcpucount:4

    - name: Test opensim-core
      run: |
        chdir $env:GITHUB_WORKSPACE\\build
        ctest --parallel 4 --output-on-failure --build-config Release

    - name: Obtain short git commit hash
      id: commithash
      shell: bash
      # https://stackoverflow.com/questions/58886293/getting-current-branch-and-commit-hash-in-github-action
      run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

    - name: Install opensim-core
      run: |
        chdir $env:GITHUB_WORKSPACE\\build
        cmake --build . --config Release --target doxygen -- /maxcpucount:4
        cmake --build . --config Release --target install -- /maxcpucount:4 /verbosity:quiet
        chdir $env:GITHUB_WORKSPACE
        move ~/opensim-core-install opensim-core-install-${{ steps.commithash.outputs.hash }}

    - name: Test Python bindings
      run: |
        $env:PATH = "$env:HOME/opensim-core-install/bin;$env:PATH"
        # Move to the installed location of the python package.
        cd ~/opensim-core-install/sdk/python
        # Run python tests.
        python -m unittest discover --start-directory opensim/tests --verbose

    - name: Upload opensim-core
      uses: actions/upload-artifact@v2
      with:
        name: opensim-core-${{ steps.commithash.outputs.hash }}-win
        path: opensim-core-${{ steps.commithash.outputs.hash }}
