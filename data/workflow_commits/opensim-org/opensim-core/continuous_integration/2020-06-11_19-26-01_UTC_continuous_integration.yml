name: continuous-integration

# TODO: build master branch after PRs are merged.
# syntax https://help.github.com/en/articles/workflow-syntax-for-github-actions
on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master
    tags:
      - '*'

jobs:


  mac:
    name: Mac

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install Homebrew and Python packages
      run: |
        brew install cmake doxygen swig@3
        pip3 install numpy

    - name: Cache SWIG
      id: cache-swig
      uses: actions/cache@v1
      with:
        path: ~/swig
        key: ${{ runner.os }}-swig

    - name: Install SWIG
      if: steps.cache-swig.outputs.cache-hit != 'true'
      run: |
        mkdir ~/swig-source && cd ~/swig-source
        wget https://github.com/swig/swig/archive/rel-3.0.12.tar.gz
        tar xzf rel-3.0.12.tar.gz && cd swig-rel-3.0.12
        sh autogen.sh && ./configure --prefix=$HOME/swig --disable-ccache
        make && make -j4 install

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v1
      with:
        path: ~/opensim_dependencies_install
        key: ${{ runner.os }}-dependencies-${{ hashFiles('dependencies/*') }}

    - name: Build dependencies
      run: |
        mkdir $GITHUB_WORKSPACE/../build_deps
        cd $GITHUB_WORKSPACE/../build_deps
        DEP_CMAKE_ARGS=($GITHUB_WORKSPACE/dependencies -LAH)
        DEP_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=~/opensim_dependencies_install)
        DEP_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        DEP_CMAKE_ARGS+=(-DSUPERBUILD_ezc3d=ON)
        DEP_CMAKE_ARGS+=(-DCMAKE_OSX_DEPLOYMENT_TARGET=10.10)
        printf '%s\n' "${DEP_CMAKE_ARGS[@]}"
        cmake "${DEP_CMAKE_ARGS[@]}"
        make --jobs 4

    - name: Configure opensim-core
      run: |
        mkdir $GITHUB_WORKSPACE/../build
        cd $GITHUB_WORKSPACE/../build
        OSIM_CMAKE_ARGS=($GITHUB_WORKSPACE -LAH)
        OSIM_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/../opensim-core-install)
        OSIM_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DEPENDENCIES_DIR=~/opensim_dependencies_install)
        OSIM_CMAKE_ARGS+=(-DCMAKE_OSX_DEPLOYMENT_TARGET=10.10)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_C3D_PARSER=ezc3d)
        OSIM_CMAKE_ARGS+=(-DBUILD_PYTHON_WRAPPING=on -DBUILD_JAVA_WRAPPING=on)
        OSIM_CMAKE_ARGS+=(-DSWIG_EXECUTABLE=$HOME/swig/bin/swig)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_INSTALL_UNIX_FHS=OFF)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DOXYGEN_USE_MATHJAX=off)
        # TODO: Update to simbody.github.io/latest
        OSIM_CMAKE_ARGS+=(-DOPENSIM_SIMBODY_DOXYGEN_LOCATION="https://simbody.github.io/simtk.org/api_docs/simbody/latest/")
        OSIM_CMAKE_ARGS+=(-DCMAKE_CXX_FLAGS="-Werror")
        printf '%s\n' "${OSIM_CMAKE_ARGS[@]}"
        cmake "${OSIM_CMAKE_ARGS[@]}"

    - name: Buid opensim-core
      run: |
        cd $GITHUB_WORKSPACE/../build
        make --jobs 4

    - name: Test opensim-core
      run: |
        cd $GITHUB_WORKSPACE/../build
        ctest --parallel 4 --output-on-failure

    - name: Obtain short git commit hash
      id: commithash
      shell: bash
      run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

    - name: Install opensim-core
      run: |
        cd $GITHUB_WORKSPACE/../build
        make doxygen
        make install
        cd $GITHUB_WORKSPACE
        mv $GITHUB_WORKSPACE/../opensim-core-install opensim-core-${{ steps.commithash.outputs.hash }}
        zip --symlinks --recurse-paths --quiet opensim-core-${{ steps.commithash.outputs.hash }}.zip opensim-core-${{ steps.commithash.outputs.hash }}

    - name: Test Python bindings
      run: |
        cd $GITHUB_WORKSPACE/../opensim-core-install/sdk/Python
        # Run the python tests, verbosely.
        python3 -m unittest discover --start-directory opensim/tests --verbose

    - name: Test Python bindings
      run: |
        $env:PATH = "$env:HOME/opensim-core-install/bin;$env:PATH"
        # Move to the installed location of the python package.
        cd ~/opensim-core-install/sdk/python
        # Run python tests.
        python -m unittest discover --start-directory opensim/tests --verbose

    - name: Upload opensim-core
      uses: actions/upload-artifact@v2
      with:
        # The upload-artifact zipping does not preserve symlinks or executable
        # bits. So we zip ourselves, even though this causes a double-zip.
        name: opensim-core-${{ steps.commithash.outputs.hash }}-mac
        path: opensim-core-${{ steps.commithash.outputs.hash }}.zip


  linux:
    name: Linux

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v1

    - name: Install packages
      run: sudo apt-get install --yes liblapack-dev freeglut3-dev libxi-dev libxmu-dev doxygen python3 python3-dev python3-numpy python3-setuptools swig

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v1
      with:
        path: ~/opensim_dependencies_install
        key: ${{ runner.os }}-dependencies-${{ hashFiles('dependencies/*') }}

    - name: Build dependencies
      run: |
        mkdir $GITHUB_WORKSPACE/../build_deps
        cd $GITHUB_WORKSPACE/../build_deps
        DEP_CMAKE_ARGS=($GITHUB_WORKSPACE/dependencies -LAH)
        DEP_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=~/opensim_dependencies_install)
        DEP_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        DEP_CMAKE_ARGS+=(-DSUPERBUILD_ezc3d=ON)
        printf '%s\n' "${DEP_CMAKE_ARGS[@]}"
        cmake "${DEP_CMAKE_ARGS[@]}"
        make --jobs 4

    - name: Configure opensim-core
      run: |
        mkdir $GITHUB_WORKSPACE/../build
        cd $GITHUB_WORKSPACE/../build
        OSIM_CMAKE_ARGS=($GITHUB_WORKSPACE -LAH)
        OSIM_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/../opensim-core-install)
        OSIM_CMAKE_ARGS+=(-DCMAKE_BUILD_TYPE=Release)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DEPENDENCIES_DIR=~/opensim_dependencies_install)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_C3D_PARSER=ezc3d)
        OSIM_CMAKE_ARGS+=(-DBUILD_PYTHON_WRAPPING=on -DBUILD_JAVA_WRAPPING=on)
        OSIM_CMAKE_ARGS+=(-DSWIG_EXECUTABLE=$HOME/swig/bin/swig)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_INSTALL_UNIX_FHS=OFF)
        OSIM_CMAKE_ARGS+=(-DOPENSIM_DOXYGEN_USE_MATHJAX=off)
        # TODO: Update to simbody.github.io/latest
        OSIM_CMAKE_ARGS+=(-DOPENSIM_SIMBODY_DOXYGEN_LOCATION="https://simbody.github.io/simtk.org/api_docs/simbody/latest/")
        OSIM_CMAKE_ARGS+=(-DCMAKE_CXX_FLAGS="-Werror")
        printf '%s\n' "${OSIM_CMAKE_ARGS[@]}"
        cmake "${OSIM_CMAKE_ARGS[@]}"

    - name: Buid opensim-core
      run: |
        cd $GITHUB_WORKSPACE/../build
        make --jobs 4

    - name: Test opensim-core
      run: |
        cd $GITHUB_WORKSPACE/../build
        # TODO: Temporary for python to find Simbody libraries.
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/opensim_dependencies_install/simbody/lib
        ctest --parallel 4 --output-on-failure

    - name: Obtain short git commit hash
      id: commithash
      shell: bash
      run: echo "::set-output name=hash::$(git rev-parse --short HEAD)"

    - name: Install opensim-core
      run: |
        cd $GITHUB_WORKSPACE/../build
        make doxygen
        make install
        cd $GITHUB_WORKSPACE
        mv $GITHUB_WORKSPACE/../opensim-core-install opensim-core-${{ steps.commithash.outputs.hash }}
        zip --symlinks --recurse-paths --quiet opensim-core-${{ steps.commithash.outputs.hash }}.zip opensim-core-${{ steps.commithash.outputs.hash }}

    - name: Test Python bindings
      run: |
        echo "TODO: Skipping Python tests."
        # cd $GITHUB_WORKSPACE/../opensim-core-install/sdk/Python
        # Run the python tests, verbosely.
        # python3 -m unittest discover --start-directory opensim/tests --verbose

    - name: Upload opensim-core
      uses: actions/upload-artifact@v2
      with:
        # The upload-artifact zipping does not preserve symlinks or executable
        # bits. So we zip ourselves, even though this causes a double-zip.
        name: opensim-core-${{ steps.commithash.outputs.hash }}-linux
        path: opensim-core-${{ steps.commithash.outputs.hash }}.zip


  style:
    name: Check style

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v1

    - name: Check for tabs
      # Ensure that there are no tabs in source code.
      # GREP returns 0 (true) if there are any matches, and
      # we don't want any matches. If there are matches,
      # print a helpful message, and make the test fail by using "false".
      # The GREP command here checks for any tab characters in the the files
      # that match the specified pattern. GREP does not pick up explicit tabs
      # (e.g., literally a \t in a source file).
      run: if grep --line-num --recursive --exclude-dir="*dependencies*" --include={CMakeLists.txt,*.cpp,*.c,*.h} -P "\t" . ; then echo "Tabs found in the lines shown above. See CONTRIBUTING.md about tabs."; false; fi
