name: Build and test

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
    - "*"

jobs:
  build:
    strategy:
      matrix:
        name: [ubuntu-gcc-5,
               ubuntu-gcc-6,
               ubuntu-gcc-7,
               ubuntu-gcc-8,
               ubuntu-gcc-9,
               ubuntu-gcc-9-mpi,
               ubuntu-clang-8,
               macos-xcode-11.3.1
               ]

        include:
          - name: ubuntu-gcc-5
            os: ubuntu-18.04
            compiler: gcc
            version: "5"
            mpi: false

          - name: ubuntu-gcc-6
            os: ubuntu-18.04
            compiler: gcc
            version: "6"
            mpi: false

          - name: ubuntu-gcc-7
            os: ubuntu-latest
            compiler: gcc
            version: "8"
            mpi: false

          - name: ubuntu-gcc-8
            os: ubuntu-latest
            compiler: gcc
            version: "8"
            mpi: false

          - name: ubuntu-gcc-9
            os: ubuntu-latest
            compiler: gcc
            version: "9"
            mpi: false

          - name: ubuntu-gcc-9-mpi
            os: ubuntu-latest
            compiler: gcc
            version: "9"
            mpi: true

          - name: ubuntu-clang-8
            os: ubuntu-latest
            compiler: clang
            version: "8"
            mpi: false

          - name: macos-xcode-11.3.1
            os: macos-latest
            compiler: xcode
            version: "11.3.1"
            mpi: false

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Install (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y pandoc libcairo2-dev ccache
        sudo apt-get install -y libboost-dev libboost-program-options-dev libboost-date-time-dev libboost-filesystem-dev libboost-regex-dev libboost-serialization-dev libboost-system-dev libboost-thread-dev 
        sudo rm -rf /usr/local/share/boost
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++-${{ matrix.version }}
          echo "::set-env name=C_COMPILER::gcc-${{ matrix.version }}"
          echo "::set-env name=CXX_COMPILER::g++-${{ matrix.version }}"
        else
          sudo apt-get install -y clang-${{ matrix.version }}
          echo "::set-env name=C_COMPILER::clang-${{ matrix.version }}"
          echo "::set-env name=CXX_COMPILER::clang++-${{ matrix.version }}"
        fi
        if [ "${{ matrix.mpi }}" = true ] ; then
          sudo apt-get install libopenmpi-dev
        fi

    - name: Install (macOS)
      if: runner.os == 'macOS'
      run: |
          brew update
          brew install pkg-config pandoc boost ccache coreutils
          sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app


    # Caches for different branches are isolated, so we don't need to put the branch name into the key.
    # The total size for all caches in a repository is 5Gb.

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      run: |
        if [ "$RUNNER_OS" = "Linux" ] ; then
          stamp=$(date '+%s')
        else
          stamp=$(gdate '+%s')
        fi
        echo "${stamp}"
        echo "::set-output name=timestamp::${stamp}"

    - name: ccache cache files
      uses: actions/cache@v1.1.0
      with:
         path: ~/.ccache
         key: ${{ matrix.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
         restore-keys: |
           ${{ matrix.name }}-ccache-

    - name: Configure and build
      env:
        USE_MPI: ${{ matrix.mpi }}
      run: |
        cd projects/cmake
        ./build.sh -travis true

    - name: Test
      env:
        USE_MPI: ${{ matrix.mpi }}
      run: |
        export PATH=${GITHUB_WORKSPACE}/projects/cmake:$PATH
        echo "\"Hello World\"" | rb
        echo ::group::Test suite
        cd tests
        ./run_integration_tests.sh -mpi ${USE_MPI} rb
        cd
        echo ::endgroup::
        echo ::group::testiphy
        git clone https://gitlab.com/testiphy/testiphy.git
        cd testiphy
        ./testiphy rb
        echo ::endgroup::
