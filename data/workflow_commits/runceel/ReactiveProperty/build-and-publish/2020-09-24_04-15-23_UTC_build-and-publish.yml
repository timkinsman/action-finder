name: Build and Release

on:
  push:
    branches: [ main, pre-release, release ]
    paths-ignore: 
      - 'docs/**'

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.402
    - name: Setup MSBuild.exe
      uses: warrenbuckley/Setup-MSBuild@v1
    - name: Update version number
      if: github.ref != 'refs/heads/release'
      shell: pwsh
      run: |
        $doc = [XML](Get-Content 'Source\SharedProperties.csproj')
        $doc.Project.PropertyGroup.Version += '-pre' + (Get-Date).ToString("yyyyMMddHHmm")
        $doc.Save('Source\SharedProperties.csproj')
        mkdir version
        New-Item version\VERSION.txt -Value $doc.Project.PropertyGroup.Version
    - name: Install dependencies
      run: dotnet restore ReactiveProperty.sln
    - name: Build
      run: msbuild ReactiveProperty.sln -p:Configuration=Release -p:Platform="Any CPU"
    - name: Test
      run: dotnet test ReactiveProperty.sln --no-restore --verbosity normal
    - name: Copy package files
      run: |
        mkdir dist
        Copy-Item (Get-ChildItem -Path "Source/**/*.nupkg" -Recurse) -Destination dist
        Copy-Item (Get-ChildItem -Path "Source/**/*.snupkg" -Recurse) -Destination dist
      shell: pwsh
    - name: Archive NuGet packages
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist
    - name: Archive Version
      uses: actions/upload-artifact@v1
      with:
        name: version
        path: version

  release-to-nuget:
    runs-on: windows-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/pre-release' || github.ref == 'refs/heads/release')
    steps:
      - name: Download archives
        uses: actions/download-artifact@v2
        with:
          name: dist
      - name: Publish packages
        run: dotnet nuget push **/*.nupkg --skip-duplicate -k ${{ secrets.NUGET_APIKEY }} -s https://api.nuget.org/v3/index.json

  create-release:
    runs-on: windows-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/pre-release' || github.ref == 'refs/heads/release')
    steps:
      - name: Download archives
        uses: actions/download-artifact@v2
        with:
          name: dist
      - name: Download version
        uses: actions/download-artifact@v2
        with:
          name: version
      - name: Set version number
        shell: pwsh
        run: |
          $v = Get-Content -Path version\VERSION.txt
          $env:VERSION = $v
      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            TBD
          draft: true
          prerelease: ${{ github.ref == 'refs/heads/pre-release' }}
      - name: Archive packages
        shell: pwsh
        run: |
          Compress-Archive -Path dist -DestinationPath packages.zip
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: packages.zip
          asset_name: packages-${{ env.VERSION }}.zip
          asset_content_type: application/zip
