name: CI

on:
  push:
    branches: [ master, release-* ]
  pull_request:
    branches: [ master, release-* ]

jobs:
  build:
    name: Building for PHP ${{ matrix.php-versions }} on ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest, windows-latest]
        php-versions: ['7.2', '7.3', '7.4']

    steps:
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml

      - uses: actions/checkout@v2
      
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Install Composer dependencies
        run: composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader
      
      - use: action/upload-artifact@v1
        with:
          name: saml2
          path: ${{ github.workspace }}
        
  sanity-check:
    name: Sanity checks for PHP ${{ matrix.php-versions }} on ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest, windows-latest]
        php-versions: ['7.2', '7.3', '7.4']

    steps:
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml

      - uses: actions/download-artifact@v1
        with:
          name: saml2

      - name: Install test framework
        run: composer require simplesamlphp/simplesamlphp-test-framework --dev

      - name: Syntax check PHP
        run: vendor/bin/check-syntax-php.sh
    
      - name: Syntax check YAML / XML / JSON
        run: |
          vendor/bin/check-syntax-yaml.sh
          vendor/bin/check-syntax-xml.sh
          vendor/bin/check-syntax-json.sh
        
  unit-tests:
    name: Unit tests for PHP ${{ matrix.php-versions }} on ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    needs: [sanity-check]
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest, windows-latest]
        php-versions: ['7.2', '7.3', '7.4']

    steps:
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml
          coverage: xdebug

      - name: PHPUnit
        if: ${{ matrix.php-versions }} != '7.3'
        run: vendor/bin/phpunit --no-coverage

      - name: PHPUnit
        if: ${{ matrix.php-versions }} == '7.3'
        run: vendor/bin/phpunit

      - name: Save coverage data
        if: ${{ matrix.php-versions }} == '7.3'
        uses: action/upload-artifact@v1
        with:
          name: build-data
          path: ${{ github.workspace }}/build

  quality:
    name: Quality control
    runs-on: [ubuntu-latest]
    needs: [unit-tests]
  
    steps:
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: '7.3'
          extensions: mbstring, xml

      - uses: actions/download-artifact@v1
        with:
          name: build-data

      - name: Codecov
        run: bash <(curl -s https://codecov.io/bash)
        
      - name: PHP Code Sniffer
        run: vendor/bin/phpcs src/
        
      - name: Psalm
        run: |
          vendor/bin/psalm
          vendor/bin/psalter --issues=UnnecessaryVarAnnotation --dry-run
