name: Continuous integration

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    name: Continuous integration

    env:
      SUMMON_PROVIDER: /usr/local/bin/gopass
      SECRETS: ${{ secrets.SECRETS }}

    steps:
      - uses: actions/checkout@v1

      - name: Get tag
        id: tag2
        uses: frabert/replace-string-action@v1.1
        with:
          pattern: 'refs/tags/(.*)'
          string: '{{ github.ref }}'
          replace-with: '$1'
        if: "startsWith(github.ref, 'refs/tags/')"
      - run: echo --${{ steps.tag2.outputs.replaced }}--

      - run: git --no-pager diff --check `git log --oneline | tail -1 | cut --fields=1 --delimiter=' '`
      - run: ci/test-eof-newline

      - uses: camptocamp/initialise-gopass-summon-action@v1
        with:
          ci-gpg-private-key: ${{secrets.CI_GPG_PRIVATE_KEY}}
          github-gopass-ci-token: ${{secrets.GITHUB_GOPASS_CI_TOKEN}}
        if: env.SECRETS == 'TRUE'
      - run: gpg --export-secret-keys --armor D121AF2DFA8E140688BD968930C9B913FD42EF13 > CI.asc
        if: env.SECRETS == 'TRUE'

      - run: echo "enablePublishing=true" > gradle.properties
        if: env.SECRETS == 'TRUE'

      - run: make build
      - run: make acceptance-tests-up
      - run: make acceptance-tests-run

      # Extract artifacts
      - run: docker run --rm --detach --name=builder mapfish_print_builder
        if: always()
      - run: docker cp builder:/src/core/build/ core/build/
        if: always()

      - run: docker cp mapfish-print_tests_1:/src/examples/build/ examples/build/
        if: always()

      - run: docker-compose logs
        if: failure()

      - run: make acceptance-tests-down

      - uses: actions/upload-artifact@v1
        with:
          name: Test results
          path: core/build/resources/actual
        if: failure()
      - uses: actions/upload-artifact@v1
        with:
          name: Reports examples
          path: examples/build/reports
        if: failure()
      - uses: actions/upload-artifact@v1
        with:
          name: Reports core
          path: core/build/reports
        if: failure()
      - uses: actions/upload-artifact@v1
        with:
          name: Examples
          path: examples/build/resources/test/examples
        if: failure()

      - name: Collect test results
        run: |
          mkdir -p /tmp/test_results/junit
          find . -name '*TEST-*.xml' -exec cp -v {} /tmp/test_results/junit/ \;
        if: failure()
      - uses: actions/upload-artifact@v1
        with:
          name: Test results
          path: /tmp/test_results
        if: failure()

      - run: mkdir -p ~/.docker
      - name: Decrypt secrets
        run: summon --environment dockerhub bash -c 'envsubst < ci/docker-config.json.tmpl > ~/.docker/config.json'
        if: env.SECRETS == 'TRUE'

      - name: publish
        run: ci/publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: env.SECRETS == 'TRUE'

      - id: version
        run: echo "##[set-output name=version;]$(grep version build.gradle|sed "s/ \+version = .\(.*\)./\1/g")"
      - id: tag
        run: echo "##[set-output name=tag;]$(echo ${{ github.ref }}|sed 's%refs/tags/%%g')"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
        if: startsWith(github.ref, 'refs/tags/') && env.SECRETS == 'TRUE'
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/libs/print-servlet-${{ steps.version.outputs.version }}.war
          asset_name: print-servlet-${{ steps.version.outputs.version }}.war
          asset_content_type: application/java-archive
        if: startsWith(github.ref, 'refs/tags/') && env.SECRETS == 'TRUE'
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/distributions/core-${{ steps.version.outputs.version }}.zip
          asset_name: print-cli-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip
        if: startsWith(github.ref, 'refs/tags/') && env.SECRETS == 'TRUE'
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/libs/print-lib-${{ steps.version.outputs.version }}.jar
          asset_name: print-lib-${{ steps.version.outputs.version }}.jar
          asset_content_type: application/java-archive
        if: startsWith(github.ref, 'refs/tags/') && env.SECRETS == 'TRUE'
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/libs/print-lib-${{ steps.version.outputs.version }}-sources.jar
          asset_name: print-lib-${{ steps.version.outputs.version }}-sources.jar
          asset_content_type: application/java-archive
        if: startsWith(github.ref, 'refs/tags/') && env.SECRETS == 'TRUE'
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./core/build/libs/print-lib-${{ steps.version.outputs.version }}-javadoc.jar
          asset_name: print-lib-${{ steps.version.outputs.version }}-javadoc.jar
          asset_content_type: application/java-archive
        if: startsWith(github.ref, 'refs/tags/') && env.SECRETS == 'TRUE'

      # Update the documentation
      - uses: actions/checkout@v2
        with:
          repository: mapfish/mapfish-print-doc
          token: ${{ secrets.GITHUB_GOPASS_CI_TOKEN }}
          path: mapfish-print-doc
        if: github.ref == 'refs/heads/master' && env.SECRETS == 'TRUE'
      - name: Publish documentation
        run: |
          cd ${GITHUB_WORKSPACE}/mapfish-print-doc
          git config user.email "ci@camptocamp.com"
          git config user.name "CI"
          git rm --ignore-unmatch -rqf .
          docker cp builder:/src/docs/build/site/. .
          git add -A .
          git commit -m 'Update docs'
          git push origin gh-pages
        if: github.ref == 'refs/heads/master' && env.SECRETS == 'TRUE'
